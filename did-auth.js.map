{"version":3,"file":"did-auth.js","sources":["../src/did-auth.js"],"sourcesContent":["import {createI18nInstance} from './i18n.js';\nimport {css, html} from 'lit-element';\nimport {ScopedElementsMixin} from '@open-wc/scoped-elements';\nimport * as commonUtils from '@dbp-toolkit/common/utils';\nimport {Icon} from '@dbp-toolkit/common';\nimport * as commonStyles from '@dbp-toolkit/common/styles';\nimport {AdapterLitElement} from '@dbp-toolkit/provider/src/adapter-lit-element';\nimport QRCode from 'webcomponent-qr-code/qr-code';\n\n// todo: this should anyway happen in the backend..\n/*\nimport { Credentials, SimpleSigner } from 'uport-credentials';\nimport { Resolver } from 'did-resolver';\nimport { getResolver } from 'ethr-did-resolver';\n\n// todo: use env vars for this.\nconst chainRpc = '';\nconst regiAddr = '';\nconst regiNet = '';\nconst appDid = '';\nconst privKey = '';\nconst discloseRqExpires = 600;\n\nconst providerConfig = {\n    rpcUrl: chainRpc,\n    registry: regiAddr,\n    networks: [\n        { name: regiNet, rpcUrl: chainRpc },\n    ],\n};\n\nconst resolver = new Resolver(getResolver(providerConfig));\n\nconst signer = SimpleSigner(privKey.toStr());\n\nconst credential = new Credentials({\n    did: appDid,\n    signer,\n    resolver,\n});\n */\n\nconst i18n = createI18nInstance();\n\n\nclass DidAuth extends ScopedElementsMixin(AdapterLitElement) {\n    constructor() {\n        super();\n        this.auth = {};\n        this.lang = i18n.language;\n        // todo: get authentication status from api server.\n        this.authenticated = false;\n        this.methodSelected = 'ethr-did';\n\n\n        this.intervalId = setInterval(async () => {\n            if (this.methodSelected !== 'did-comm') {\n                return;\n            }\n\n            const didCommInviteDecoded = JSON.parse(this.didCommInvite);\n            const inviteId = didCommInviteDecoded.invitation['@id'];\n            console.log(inviteId);\n            try {\n                const res = await this.fetchDidCommInviteStatus(inviteId);\n                console.log('Invite accepted! ' + res);\n                this.authenticated = true;\n                clearInterval(this.intervalId);\n            } catch (error) {\n                console.log('Invite not accepted yet. :(');\n            }\n\n        }, 1000);\n    }\n\n    static get scopedElements() {\n        return {\n            'dbp-icon': Icon,\n            'dbp-qr-code': QRCode\n        };\n    }\n\n    static get properties() {\n        return {\n            ...super.properties,\n            lang: { type: String },\n            authenticated: { type: Boolean, attribute: false },\n            methodSelected: { type: String },\n            didCommInvite: { type: String },\n            intervalId: { type: Number },\n            auth: { type: Object },\n        };\n    }\n\n    connectedCallback() {\n        super.connectedCallback();\n    }\n\n    disconnectedCallback() {\n        super.disconnectedCallback();\n        if (this.intervalId) {\n            clearInterval(this.intervalId);\n        }\n    }\n\n    update(changedProperties) {\n        changedProperties.forEach((oldValue, propName) => {\n            switch (propName) {\n                case \"lang\":\n                    i18n.changeLanguage(this.lang);\n                    break;\n            }\n        });\n\n        super.update(changedProperties);\n    }\n\n    static get styles() {\n        // language=css\n        return css`\n            ${commonStyles.getThemeCSS()}\n            \n            .success {\n                font-size: 10rem;\n                line-height: 10rem;\n                color: green;\n            }\n        `;\n    }\n\n    async httpGetAsync(url, options) {\n        let response = await fetch(url, options).then(result => {\n            if (!result.ok) throw result;\n            return result.json();\n        });\n\n        return response;\n    }\n\n    async fetchDidCommInvite() {\n        const options = {\n            headers: {\n                Authorization: \"Bearer \" + this.auth.token\n            }\n        };\n        const baseUrl = 'http://127.0.0.1:8000/';\n        const url = baseUrl + 'did_connections?page=1';\n        const resp = await this.httpGetAsync(url, options);\n        return resp['hydra:member'][0].invitation;\n    }\n\n    async fetchDidCommInviteStatus(inviteId) {\n        const options = {\n            headers: {\n                Authorization: \"Bearer \" + this.auth.token\n            }\n        };\n        const baseUrl = 'http://127.0.0.1:8000/';\n        const url = baseUrl + 'did_connections/' + inviteId;\n        const resp = await this.httpGetAsync(url, options);\n        return resp.invitation;\n    }\n\n    async onMethodSelect(e) {\n        const newMethod = e.currentTarget.value;\n        if (newMethod === 'did-comm' && !this.didCommInvite) {\n            this.didCommInvite = await this.fetchDidCommInvite();\n        }\n        this.methodSelected = newMethod;\n    }\n\n    // todo: check if already verified.. (polling)\n    // uport:\n    // todo: use uport-credentials to generate qr code...\n    // todo: (is the uport wallet supported?)\n    // todo: re-authenticate\n    // todo: fix link to other pages.. (use router, without page reload.)\n    render() {\n        if (!this.auth.token) {\n            return html`\n                <p>${i18n.t('please-login')}</p>\n            `;\n        }\n\n        if (!this.authenticated) {\n            const qrDataUport = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NkstUiJ9.eyJpYXQiOjE2MTI0MjQ2MzUsImV4cCI6MTYxMjQyNTIzNSwicmVxdWVzdGVkIjpbXSwiY2FsbGJhY2siOiJodHRwOi8vNzQwNjc2NDIubmdyb2suaW8vIiwidHlwZSI6InNoYXJlUmVxIiwiaXNzIjoiZGlkOmV0aHI6YXJ0aXNfdDE6MHhjMjExN0EzMzFiMzE5NWI2NTQ1NzdCQjU1OTY1QzhlNjlGYzU5MTliIn0.M3bQmSGf0ZCQCX74LFPkr-a5eEp8yopuxWQx33RQTTGRMYu9nXAoJw_DmS00Jxx32aCGJ6fVflXprOgsAtVM5AE';\n            const qrDataDidComm = btoa(this.didCommInvite);\n            const qrData = this.methodSelected === 'ethr-did' ? qrDataUport : qrDataDidComm;\n\n            return html`\n            <div>\n                <label>${i18n.t('did-auth.select-method')}</label>\n                <br />\n                <select @change=\"${(e) => this.onMethodSelect(e)}\">\n                    <option value=\"ethr-did\">Ethr-DID (uport shareReq) (todo)</option>\n                    <option value=\"did-comm\">DidComm (aries-framework-go)</option>\n                </select>\n            </div>\n            \n            <p>\n                ${i18n.t('did-auth.scan')}\n            </p>\n            \n            <dbp-qr-code\n                data=\"${qrData}\"\n                format=\"svg\"\n                modulesize=\"5\"\n                margin=\"1\"\n            ></dbp-qr-code><br />\n            \n            <pre>${qrData}</pre>\n            \n            <p>\n                ${i18n.t('wallets')}\n            </p>\n            <ul>\n                <li><a href=\"http://minerva.digital/\" target=\"_blank\">Minerva Wallet</a></li>\n                <li>Browser wallet</li>\n            </ul>\n        `;\n        }\n\n        // todo: localize\n        return html`\n            <span class=\"success\">âœ”</span><br />\n            \n            <p>${i18n.t('did-auth.success')}</p>\n            \n            <p>\n                Now you can export <a href=\"/dist/de/issue-diploma\">diplomas</a>\n                or <a href=\"/dist/de/issue-grades\">grades</a>.\n            </p>\n        `;\n    }\n}\n\ncommonUtils.defineCustomElement('did-auth', DidAuth);\n"],"names":["i18n","createI18nInstance","DidAuth","ScopedElementsMixin","AdapterLitElement","constructor","auth","lang","language","authenticated","methodSelected","intervalId","setInterval","async","_this","inviteId","JSON","parse","didCommInvite","invitation","console","log","res","fetchDidCommInviteStatus","clearInterval","error","Icon","QRCode","super","properties","type","String","Boolean","attribute","Number","Object","connectedCallback","disconnectedCallback","this","update","changedProperties","forEach","oldValue","propName","changeLanguage","css","commonStyles.getThemeCSS","url","options","fetch","then","result","ok","json","headers","Authorization","token","httpGetAsync","baseUrl","e","newMethod","currentTarget","value","fetchDidCommInvite","render","html","t","qrDataUport","qrDataDidComm","btoa","qrData","onMethodSelect","commonUtils.defineCustomElement"],"mappings":";;;;0NA0CA,MAAMA,EAAOC,IAGb,MAAMC,UAAgBC,EAAoBC,IACtCC,wCAESC,KAAO,QACPC,KAAOP,EAAKQ,cAEZC,eAAgB,OAChBC,eAAiB,gBAGjBC,WAAaC,aAAYC,oBACE,aAAxBC,EAAKJ,4BAKHK,EADuBC,KAAKC,MAAMH,EAAKI,eACPC,WAAW,OACjDC,QAAQC,IAAIN,aAEFO,QAAYR,EAAKS,yBAAyBR,GAChDK,QAAQC,IAAI,oBAAsBC,GAClCR,EAAKL,eAAgB,EACrBe,cAAcV,EAAKH,YACrB,MAAOc,GACLL,QAAQC,IAAI,kCAGjB,uCAII,YACSK,gBACGC,uCAMZC,MAAMC,YACTtB,KAAM,CAAEuB,KAAMC,QACdtB,cAAe,CAAEqB,KAAME,QAASC,WAAW,GAC3CvB,eAAgB,CAAEoB,KAAMC,QACxBb,cAAe,CAAEY,KAAMC,QACvBpB,WAAY,CAAEmB,KAAMI,QACpB5B,KAAM,CAAEwB,KAAMK,UAItBC,0BACUA,oBAGVC,6BACUA,uBACFC,KAAK3B,YACLa,cAAcc,KAAK3B,YAI3B4B,OAAOC,GACHA,EAAkBC,SAAQ,CAACC,EAAUC,YACzBA,OACC,OACD3C,EAAK4C,eAAeN,KAAK/B,gBAK/BgC,OAAOC,8BAKNK,SAAI;cAAX;;;;;;;WACMC,wBAUSC,EAAKC,gBACCC,MAAMF,EAAKC,GAASE,MAAKC,QACrCA,EAAOC,GAAI,MAAMD,SACfA,EAAOE,2CAOZL,EAAU,CACZM,QAAS,CACLC,cAAe,UAAYjB,KAAKhC,KAAKkD,qBAK1BlB,KAAKmB,aADZC,+CAC8BV,IAC9B,gBAAgB,GAAG7B,0CAGJJ,SACrBiC,EAAU,CACZM,QAAS,CACLC,cAAe,UAAYjB,KAAKhC,KAAKkD,QAIvCT,EAAMW,yCAA+B3C,eACxBuB,KAAKmB,aAAaV,EAAKC,IAC9B7B,gCAGKwC,SACXC,EAAYD,EAAEE,cAAcC,MAChB,aAAdF,GAA6BtB,KAAKpB,qBAC7BA,oBAAsBoB,KAAKyB,2BAE/BrD,eAAiBkD,EAS1BI,aACS1B,KAAKhC,KAAKkD,aACJS,SAAK;qBAAZ;eACSjE,EAAKkE,EAAE,qBAIf5B,KAAK7B,cAAe,OACf0D,EAAc,+WACdC,EAAgBC,KAAK/B,KAAKpB,eAC1BoD,EAAiC,aAAxBhC,KAAK5B,eAAgCyD,EAAcC,SAE3DH,SAAK;;yBAAZ;;mCAAA;;;;;;;kBAAA;;;;wBAAA;;;;;;mBAAA;;;kBAAA;;;;;;WAEajE,EAAKkE,EAAE,2BAEIP,GAAMrB,KAAKiC,eAAeZ,IAO5C3D,EAAKkE,EAAE,iBAIDI,EAMLA,EAGDtE,EAAKkE,EAAE,mBAUVD,SAAK;;;iBAAZ;;;;;;WAGSjE,EAAKkE,EAAE,sBAUxBM,EAAgC,WAAYtE"}