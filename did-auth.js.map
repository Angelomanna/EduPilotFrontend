{"version":3,"file":"did-auth.js","sources":["../src/did-auth.js"],"sourcesContent":["import {createI18nInstance} from './i18n.js';\nimport {css, html} from 'lit-element';\nimport {ScopedElementsMixin} from '@open-wc/scoped-elements';\nimport * as commonUtils from '@dbp-toolkit/common/utils';\nimport {Icon} from '@dbp-toolkit/common';\nimport * as commonStyles from '@dbp-toolkit/common/styles';\nimport DBPLitElement from '@dbp-toolkit/common/dbp-lit-element';\nimport QRCode from 'webcomponent-qr-code/qr-code';\n\n// todo: this should anyway happen in the backend..\n/*\nimport { Credentials, SimpleSigner } from 'uport-credentials';\nimport { Resolver } from 'did-resolver';\nimport { getResolver } from 'ethr-did-resolver';\n\n// todo: use env vars for this.\nconst chainRpc = '';\nconst regiAddr = '';\nconst regiNet = '';\nconst appDid = '';\nconst privKey = '';\nconst discloseRqExpires = 600;\n\nconst providerConfig = {\n    rpcUrl: chainRpc,\n    registry: regiAddr,\n    networks: [\n        { name: regiNet, rpcUrl: chainRpc },\n    ],\n};\n\nconst resolver = new Resolver(getResolver(providerConfig));\n\nconst signer = SimpleSigner(privKey.toStr());\n\nconst credential = new Credentials({\n    did: appDid,\n    signer,\n    resolver,\n});\n */\n\nconst i18n = createI18nInstance();\n\n\nclass DidAuth extends ScopedElementsMixin(DBPLitElement) {\n    constructor() {\n        super();\n        this.lang = i18n.language;\n        // todo: get authentication status from api server.\n        this.authenticated = false;\n        //this.auth = {};\n    }\n\n    static get scopedElements() {\n        return {\n            'dbp-icon': Icon,\n            'dbp-qr-code': QRCode\n        };\n    }\n\n    static get properties() {\n        return {\n            lang: { type: String },\n            authenticated: { type: Boolean, attribute: false },\n            //auth: { type: Object },\n        };\n    }\n\n    connectedCallback() {\n        super.connectedCallback();\n    }\n\n    update(changedProperties) {\n        changedProperties.forEach((oldValue, propName) => {\n            switch (propName) {\n                case \"lang\":\n                    i18n.changeLanguage(this.lang);\n                    break;\n            }\n        });\n\n        super.update(changedProperties);\n    }\n\n    static get styles() {\n        // language=css\n        return css`\n            ${commonStyles.getThemeCSS()}\n            \n            .success {\n                font-size: 10rem;\n                line-height: 10rem;\n                color: green;\n            }\n        `;\n    }\n    async httpGetAsync(url, options) {\n        let response = await fetch(url, options).then(result => {\n            if (!result.ok) throw result;\n            return result.json();\n        });\n\n        return response;\n    }\n\n\n    async checkAuthenticated() {\n        const options = {\n            headers: {\n                Authorization: \"Bearer \" + window.DBPAuthToken\n            }\n        };\n        const baseUrl = 'http://127.0.0.1:8000/';\n        const url = baseUrl + 'organizations?page=1';\n        const resp = await this.httpGetAsync(url, options);\n        console.log(resp);\n    }\n\n    // todo: remove this, it is only here for demo purposes\n    tempNext() {\n        this.authenticated = true;\n    }\n\n    // todo: check if already verified..\n    // todo: use uport-credentials to generate qr code...\n    // todo: (is the uport wallet supported?)\n    // todo: confirmation screen\n    // todo: i18n\n    // todo: re-authenticate\n    // todo: fix link to other pages.. (use router, without page reload.)\n    render() {\n        if (!window.DBPAuthToken) {\n            return html`\n                <p>${i18n.t('please-login')}</p>\n            `;\n        }\n\n        if (!this.authenticated) {\n            const qrData = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NkstUiJ9.eyJpYXQiOjE2MTI0MjQ2MzUsImV4cCI6MTYxMjQyNTIzNSwicmVxdWVzdGVkIjpbXSwiY2FsbGJhY2siOiJodHRwOi8vNzQwNjc2NDIubmdyb2suaW8vIiwidHlwZSI6InNoYXJlUmVxIiwiaXNzIjoiZGlkOmV0aHI6YXJ0aXNfdDE6MHhjMjExN0EzMzFiMzE5NWI2NTQ1NzdCQjU1OTY1QzhlNjlGYzU5MTliIn0.M3bQmSGf0ZCQCX74LFPkr-a5eEp8yopuxWQx33RQTTGRMYu9nXAoJw_DmS00Jxx32aCGJ6fVflXprOgsAtVM5AE';\n            return html`\n            <div>\n                <label>${i18n.t('did-auth.select-method')}</label>\n                <br />\n                <select>\n                    <option value=\"ethr-did\">Ethr-DID (uport shareReq)</option>\n                    <option value=\"did-comm\" disabled>DidComm (todo)</option>\n                </select>\n            </div>\n            \n            <p>\n                ${i18n.t('did-auth.scan')}\n            </p>\n            \n            <dbp-qr-code\n                data=\"${qrData}\"\n                format=\"svg\"\n                modulesize=\"5\"\n                margin=\"1\"\n                @click=\"${() => this.tempNext()}\"\n            ></dbp-qr-code><br />\n            \n            <p>\n                ${i18n.t('wallets')}\n            </p>\n            <ul>\n                <li><a href=\"http://minerva.digital/\" target=\"_blank\">Minerva Wallet</a></li>\n                <li>Browser wallet</li>\n            </ul>\n        `;\n        }\n\n        return html`\n            <button @click=\"${this.checkAuthenticated}\">test</button>\n            <span class=\"success\">âœ”</span><br />\n            \n            <p>${i18n.t('did-auth.success')}</p>\n            \n            <p>\n                Now you can export <a href=\"/dist/de/issue-diploma\">diplomas</a>\n                or <a href=\"/dist/de/issue-grades\">grades</a>.\n            </p>\n        `;\n    }\n}\n\ncommonUtils.defineCustomElement('did-auth', DidAuth);\n"],"names":["i18n","createI18nInstance","DidAuth","ScopedElementsMixin","DBPLitElement","constructor","lang","language","authenticated","Icon","QRCode","type","String","Boolean","attribute","connectedCallback","update","changedProperties","forEach","oldValue","propName","changeLanguage","this","css","commonStyles.getThemeCSS","url","options","fetch","then","result","ok","json","headers","Authorization","window","DBPAuthToken","resp","httpGetAsync","baseUrl","console","log","tempNext","render","html","t","qrData","checkAuthenticated","commonUtils.defineCustomElement"],"mappings":";;;;;;;;;;;;;oRA0CA,MAAMA,EAAOC,IAGb,MAAMC,UAAgBC,EAAoBC,IACtCC,2BAESC,KAAON,EAAKO,cAEZC,eAAgB,oCAKd,YACSC,gBACGC,iCAKZ,CACHJ,KAAM,CAAEK,KAAMC,QACdJ,cAAe,CAAEG,KAAME,QAASC,WAAW,IAKnDC,0BACUA,oBAGVC,OAAOC,GACHA,EAAkBC,SAAQ,CAACC,EAAUC,YACzBA,OACC,OACDpB,EAAKqB,eAAeC,KAAKhB,gBAK/BU,OAAOC,8BAKNM,SAAI;cAAX;;;;;;;WACMC,wBASSC,EAAKC,gBACCC,MAAMF,EAAKC,GAASE,MAAKC,QACrCA,EAAOC,GAAI,MAAMD,SACfA,EAAOE,2CAQZL,EAAU,CACZM,QAAS,CACLC,cAAe,UAAYC,OAAOC,eAKpCC,QAAad,KAAKe,aADZC,6CAC8BZ,GAC1Ca,QAAQC,IAAIJ,GAIhBK,gBACSjC,eAAgB,EAUzBkC,aACSR,OAAOC,oBACDQ,SAAK;qBAAZ;eACS3C,EAAK4C,EAAE,qBAIftB,KAAKd,cAAe,OACfqC,EAAS,sXACRF,SAAK;;yBAAZ;;;;;;;;;kBAAA;;;;wBAAA;;;;0BAAA;;;;kBAAA;;;;;;WAEa3C,EAAK4C,EAAE,0BASd5C,EAAK4C,EAAE,iBAIDC,GAIE,IAAMvB,KAAKmB,YAInBzC,EAAK4C,EAAE,mBASVD,SAAK;8BAAZ;;;iBAAA;;;;;;WACsBrB,KAAKwB,mBAGlB9C,EAAK4C,EAAE,sBAUxBG,EAAgC,WAAY7C"}