{"version":3,"file":"class-map.2d9141b5.es.js","sources":["../../vendor/toolkit/packages/common/dbp-lit-element.js","../../node_modules/lit-html/directives/class-map.js"],"sourcesContent":["import {AdapterLitElement} from \"./src/adapter-lit-element\";\n\nexport default class DBPLitElement extends AdapterLitElement {\n    _(selector) {\n        return this.shadowRoot === null ? this.querySelector(selector) : this.shadowRoot.querySelector(selector);\n    }\n}\n","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributePart, directive, PropertyPart } from '../lit-html.js';\n// IE11 doesn't support classList on SVG elements, so we emulate it with a Set\nclass ClassList {\n    constructor(element) {\n        this.classes = new Set();\n        this.changed = false;\n        this.element = element;\n        const classList = (element.getAttribute('class') || '').split(/\\s+/);\n        for (const cls of classList) {\n            this.classes.add(cls);\n        }\n    }\n    add(cls) {\n        this.classes.add(cls);\n        this.changed = true;\n    }\n    remove(cls) {\n        this.classes.delete(cls);\n        this.changed = true;\n    }\n    commit() {\n        if (this.changed) {\n            let classString = '';\n            this.classes.forEach((cls) => classString += cls + ' ');\n            this.element.setAttribute('class', classString);\n        }\n    }\n}\n/**\n * Stores the ClassInfo object applied to a given AttributePart.\n * Used to unset existing values when a new ClassInfo object is applied.\n */\nconst previousClassesCache = new WeakMap();\n/**\n * A directive that applies CSS classes. This must be used in the `class`\n * attribute and must be the only part used in the attribute. It takes each\n * property in the `classInfo` argument and adds the property name to the\n * element's `class` if the property value is truthy; if the property value is\n * falsey, the property name is removed from the element's `class`. For example\n * `{foo: bar}` applies the class `foo` if the value of `bar` is truthy.\n * @param classInfo {ClassInfo}\n */\nexport const classMap = directive((classInfo) => (part) => {\n    if (!(part instanceof AttributePart) || (part instanceof PropertyPart) ||\n        part.committer.name !== 'class' || part.committer.parts.length > 1) {\n        throw new Error('The `classMap` directive must be used in the `class` attribute ' +\n            'and must be the only part in the attribute.');\n    }\n    const { committer } = part;\n    const { element } = committer;\n    let previousClasses = previousClassesCache.get(part);\n    if (previousClasses === undefined) {\n        // Write static classes once\n        // Use setAttribute() because className isn't a string on SVG elements\n        element.setAttribute('class', committer.strings.join(' '));\n        previousClassesCache.set(part, previousClasses = new Set());\n    }\n    const classList = (element.classList || new ClassList(element));\n    // Remove old classes that no longer apply\n    // We use forEach() instead of for-of so that re don't require down-level\n    // iteration.\n    previousClasses.forEach((name) => {\n        if (!(name in classInfo)) {\n            classList.remove(name);\n            previousClasses.delete(name);\n        }\n    });\n    // Add or remove classes based on their classMap value\n    for (const name in classInfo) {\n        const value = classInfo[name];\n        if (value != previousClasses.has(name)) {\n            // We explicitly want a loose truthy check of `value` because it seems\n            // more convenient that '' and 0 are skipped.\n            if (value) {\n                classList.add(name);\n                previousClasses.add(name);\n            }\n            else {\n                classList.remove(name);\n                previousClasses.delete(name);\n            }\n        }\n    }\n    if (typeof classList.commit === 'function') {\n        classList.commit();\n    }\n});\n//# sourceMappingURL=class-map.js.map"],"names":["DBPLitElement","AdapterLitElement","_","selector","this","shadowRoot","querySelector","ClassList","constructor","element","classes","Set","changed","classList","getAttribute","split","cls","add","remove","delete","commit","classString","forEach","setAttribute","previousClassesCache","WeakMap","classMap","directive","classInfo","part","AttributePart","PropertyPart","committer","name","parts","length","Error","previousClasses","get","undefined","strings","join","set","value","has"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;iEAEe,MAAMA,UAAsBC,EACvCC,EAAEC,UAC6B,OAApBC,KAAKC,WAAsBD,KAAKE,cAAcH,GAAYC,KAAKC,WAAWC,cAAcH;;;;;;;;;;;;;GCWvG,MAAMI,EACFC,YAAYC,QACHC,QAAU,IAAIC,SACdC,SAAU,OACVH,QAAUA,QACTI,GAAaJ,EAAQK,aAAa,UAAY,IAAIC,MAAM,WACzD,MAAMC,KAAOH,OACTH,QAAQO,IAAID,GAGzBC,IAAID,QACKN,QAAQO,IAAID,QACZJ,SAAU,EAEnBM,OAAOF,QACEN,QAAQS,OAAOH,QACfJ,SAAU,EAEnBQ,YACQhB,KAAKQ,QAAS,KACVS,EAAc,QACbX,QAAQY,SAASN,GAAQK,GAAeL,EAAM,WAC9CP,QAAQc,aAAa,QAASF,KAQ/C,MAAMG,EAAuB,IAAIC,QAUpBC,EAAWC,GAAWC,GAAeC,SACxCA,aAAgBC,IAAmBD,aAAgBE,GAC7B,UAAxBF,EAAKG,UAAUC,MAAoBJ,EAAKG,UAAUE,MAAMC,OAAS,QAC3D,IAAIC,MAAM,oHAGdJ,UAAEA,GAAcH,GAChBpB,QAAEA,GAAYuB,MAChBK,EAAkBb,EAAqBc,IAAIT,QACvBU,IAApBF,IAGA5B,EAAQc,aAAa,QAASS,EAAUQ,QAAQC,KAAK,MACrDjB,EAAqBkB,IAAIb,EAAMQ,EAAkB,IAAI1B,YAEnDE,EAAaJ,EAAQI,WAAa,IAAIN,EAAUE,GAItD4B,EAAgBf,SAASW,IACfA,KAAQL,IACVf,EAAUK,OAAOe,GACjBI,EAAgBlB,OAAOc,WAI1B,MAAMA,KAAQL,EAAW,OACpBe,EAAQf,EAAUK,GACpBU,GAASN,EAAgBO,IAAIX,KAGzBU,GACA9B,EAAUI,IAAIgB,GACdI,EAAgBpB,IAAIgB,KAGpBpB,EAAUK,OAAOe,GACjBI,EAAgBlB,OAAOc,KAIH,mBAArBpB,EAAUO,QACjBP,EAAUO"}