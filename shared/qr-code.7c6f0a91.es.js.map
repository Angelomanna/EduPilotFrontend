{"version":3,"file":"qr-code.7c6f0a91.es.js","sources":["../../node_modules/qrjs/qr.js","../../node_modules/webcomponent-qr-code/qr-code.js"],"sourcesContent":["/* qr.js -- QR code generator in Javascript (revision 2011-01-19)\n * Written by Kang Seonghoon <public+qrjs@mearie.org>.\n *\n * This source code is in the public domain; if your jurisdiction does not\n * recognize the public domain the terms of Creative Commons CC0 license\n * apply. In the other words, you can always do what you want.\n */\n(function(root, name, definition) {\n\tif (typeof define === 'function' && define.amd) {\n\t\tdefine([], definition);\n\t} else if (typeof module === 'object' && module.exports) {\n\t\tmodule.exports = definition();\n\t} else {\n\t\troot[name] = definition();\n\t}\n})(this, 'QRCode', function() {\n/* Quick overview: QR code composed of 2D array of modules (a rectangular\n * area that conveys one bit of information); some modules are fixed to help\n * the recognition of the code, and remaining data modules are further divided\n * into 8-bit code words which are augumented by Reed-Solomon error correcting\n * codes (ECC). There could be multiple ECCs, in the case the code is so large\n * that it is helpful to split the raw data into several chunks.\n *\n * The number of modules is determined by the code's \"version\", ranging from 1\n * (21x21) to 40 (177x177). How many ECC bits are used is determined by the\n * ECC level (L/M/Q/H). The number and size (and thus the order of generator\n * polynomial) of ECCs depend to the version and ECC level.\n */\n\n// per-version information (cf. JIS X 0510:2004 pp. 30--36, 71)\n//\n// [0]: the degree of generator polynomial by ECC levels\n// [1]: # of code blocks by ECC levels\n// [2]: left-top positions of alignment patterns\n//\n// the number in this table (in particular, [0]) does not exactly match with\n// the numbers in the specficiation. see augumenteccs below for the reason.\nvar VERSIONS = [\n\tnull,\n\t[[10, 7,17,13], [ 1, 1, 1, 1], []],\n\t[[16,10,28,22], [ 1, 1, 1, 1], [4,16]],\n\t[[26,15,22,18], [ 1, 1, 2, 2], [4,20]],\n\t[[18,20,16,26], [ 2, 1, 4, 2], [4,24]],\n\t[[24,26,22,18], [ 2, 1, 4, 4], [4,28]],\n\t[[16,18,28,24], [ 4, 2, 4, 4], [4,32]],\n\t[[18,20,26,18], [ 4, 2, 5, 6], [4,20,36]],\n\t[[22,24,26,22], [ 4, 2, 6, 6], [4,22,40]],\n\t[[22,30,24,20], [ 5, 2, 8, 8], [4,24,44]],\n\t[[26,18,28,24], [ 5, 4, 8, 8], [4,26,48]],\n\t[[30,20,24,28], [ 5, 4,11, 8], [4,28,52]],\n\t[[22,24,28,26], [ 8, 4,11,10], [4,30,56]],\n\t[[22,26,22,24], [ 9, 4,16,12], [4,32,60]],\n\t[[24,30,24,20], [ 9, 4,16,16], [4,24,44,64]],\n\t[[24,22,24,30], [10, 6,18,12], [4,24,46,68]],\n\t[[28,24,30,24], [10, 6,16,17], [4,24,48,72]],\n\t[[28,28,28,28], [11, 6,19,16], [4,28,52,76]],\n\t[[26,30,28,28], [13, 6,21,18], [4,28,54,80]],\n\t[[26,28,26,26], [14, 7,25,21], [4,28,56,84]],\n\t[[26,28,28,30], [16, 8,25,20], [4,32,60,88]],\n\t[[26,28,30,28], [17, 8,25,23], [4,26,48,70,92]],\n\t[[28,28,24,30], [17, 9,34,23], [4,24,48,72,96]],\n\t[[28,30,30,30], [18, 9,30,25], [4,28,52,76,100]],\n\t[[28,30,30,30], [20,10,32,27], [4,26,52,78,104]],\n\t[[28,26,30,30], [21,12,35,29], [4,30,56,82,108]],\n\t[[28,28,30,28], [23,12,37,34], [4,28,56,84,112]],\n\t[[28,30,30,30], [25,12,40,34], [4,32,60,88,116]],\n\t[[28,30,30,30], [26,13,42,35], [4,24,48,72,96,120]],\n\t[[28,30,30,30], [28,14,45,38], [4,28,52,76,100,124]],\n\t[[28,30,30,30], [29,15,48,40], [4,24,50,76,102,128]],\n\t[[28,30,30,30], [31,16,51,43], [4,28,54,80,106,132]],\n\t[[28,30,30,30], [33,17,54,45], [4,32,58,84,110,136]],\n\t[[28,30,30,30], [35,18,57,48], [4,28,56,84,112,140]],\n\t[[28,30,30,30], [37,19,60,51], [4,32,60,88,116,144]],\n\t[[28,30,30,30], [38,19,63,53], [4,28,52,76,100,124,148]],\n\t[[28,30,30,30], [40,20,66,56], [4,22,48,74,100,126,152]],\n\t[[28,30,30,30], [43,21,70,59], [4,26,52,78,104,130,156]],\n\t[[28,30,30,30], [45,22,74,62], [4,30,56,82,108,134,160]],\n\t[[28,30,30,30], [47,24,77,65], [4,24,52,80,108,136,164]],\n\t[[28,30,30,30], [49,25,81,68], [4,28,56,84,112,140,168]]];\n\n// mode constants (cf. Table 2 in JIS X 0510:2004 p. 16)\nvar MODE_TERMINATOR = 0;\nvar MODE_NUMERIC = 1, MODE_ALPHANUMERIC = 2, MODE_OCTET = 4, MODE_KANJI = 8;\n\n// validation regexps\nvar NUMERIC_REGEXP = /^\\d*$/;\nvar ALPHANUMERIC_REGEXP = /^[A-Za-z0-9 $%*+\\-./:]*$/;\nvar ALPHANUMERIC_OUT_REGEXP = /^[A-Z0-9 $%*+\\-./:]*$/;\n\n// ECC levels (cf. Table 22 in JIS X 0510:2004 p. 45)\nvar ECCLEVEL_L = 1, ECCLEVEL_M = 0, ECCLEVEL_Q = 3, ECCLEVEL_H = 2;\n\n// GF(2^8)-to-integer mapping with a reducing polynomial x^8+x^4+x^3+x^2+1\n// invariant: GF256_MAP[GF256_INVMAP[i]] == i for all i in [1,256)\nvar GF256_MAP = [], GF256_INVMAP = [-1];\nfor (var i = 0, v = 1; i < 255; ++i) {\n\tGF256_MAP.push(v);\n\tGF256_INVMAP[v] = i;\n\tv = (v * 2) ^ (v >= 128 ? 0x11d : 0);\n}\n\n// generator polynomials up to degree 30\n// (should match with polynomials in JIS X 0510:2004 Appendix A)\n//\n// generator polynomial of degree K is product of (x-\\alpha^0), (x-\\alpha^1),\n// ..., (x-\\alpha^(K-1)). by convention, we omit the K-th coefficient (always 1)\n// from the result; also other coefficients are written in terms of the exponent\n// to \\alpha to avoid the redundant calculation. (see also calculateecc below.)\nvar GF256_GENPOLY = [[]];\nfor (var i = 0; i < 30; ++i) {\n\tvar prevpoly = GF256_GENPOLY[i], poly = [];\n\tfor (var j = 0; j <= i; ++j) {\n\t\tvar a = (j < i ? GF256_MAP[prevpoly[j]] : 0);\n\t\tvar b = GF256_MAP[(i + (prevpoly[j-1] || 0)) % 255];\n\t\tpoly.push(GF256_INVMAP[a ^ b]);\n\t}\n\tGF256_GENPOLY.push(poly);\n}\n\n// alphanumeric character mapping (cf. Table 5 in JIS X 0510:2004 p. 19)\nvar ALPHANUMERIC_MAP = {};\nfor (var i = 0; i < 45; ++i) {\n\tALPHANUMERIC_MAP['0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:'.charAt(i)] = i;\n}\n\n// mask functions in terms of row # and column #\n// (cf. Table 20 in JIS X 0510:2004 p. 42)\nvar MASKFUNCS = [\n\tfunction(i,j) { return (i+j) % 2 == 0; },\n\tfunction(i,j) { return i % 2 == 0; },\n\tfunction(i,j) { return j % 3 == 0; },\n\tfunction(i,j) { return (i+j) % 3 == 0; },\n\tfunction(i,j) { return (((i/2)|0) + ((j/3)|0)) % 2 == 0; },\n\tfunction(i,j) { return (i*j) % 2 + (i*j) % 3 == 0; },\n\tfunction(i,j) { return ((i*j) % 2 + (i*j) % 3) % 2 == 0; },\n\tfunction(i,j) { return ((i+j) % 2 + (i*j) % 3) % 2 == 0; }];\n\n// returns true when the version information has to be embeded.\nvar needsverinfo = function(ver) { return ver > 6; };\n\n// returns the size of entire QR code for given version.\nvar getsizebyver = function(ver) { return 4 * ver + 17; };\n\n// returns the number of bits available for code words in this version.\nvar nfullbits = function(ver) {\n\t/*\n\t * |<--------------- n --------------->|\n\t * |        |<----- n-17 ---->|        |\n\t * +-------+                ///+-------+ ----\n\t * |       |                ///|       |    ^\n\t * |  9x9  |       @@@@@    ///|  9x8  |    |\n\t * |       | # # # @5x5@ # # # |       |    |\n\t * +-------+       @@@@@       +-------+    |\n\t *       #                               ---|\n\t *                                        ^ |\n\t *       #                                |\n\t *     @@@@@       @@@@@       @@@@@      | n\n\t *     @5x5@       @5x5@       @5x5@   n-17\n\t *     @@@@@       @@@@@       @@@@@      | |\n\t *       #                                | |\n\t * //////                                 v |\n\t * //////#                               ---|\n\t * +-------+       @@@@@       @@@@@        |\n\t * |       |       @5x5@       @5x5@        |\n\t * |  8x9  |       @@@@@       @@@@@        |\n\t * |       |                                v\n\t * +-------+                             ----\n\t *\n\t * when the entire code has n^2 modules and there are m^2-3 alignment\n\t * patterns, we have:\n\t * - 225 (= 9x9 + 9x8 + 8x9) modules for finder patterns and\n\t *   format information;\n\t * - 2n-34 (= 2(n-17)) modules for timing patterns;\n\t * - 36 (= 3x6 + 6x3) modules for version information, if any;\n\t * - 25m^2-75 (= (m^2-3)(5x5)) modules for alignment patterns\n\t *   if any, but 10m-20 (= 2(m-2)x5) of them overlaps with\n\t *   timing patterns.\n\t */\n\tvar v = VERSIONS[ver];\n\tvar nbits = 16*ver*ver + 128*ver + 64; // finder, timing and format info.\n\tif (needsverinfo(ver)) nbits -= 36; // version information\n\tif (v[2].length) { // alignment patterns\n\t\tnbits -= 25 * v[2].length * v[2].length - 10 * v[2].length - 55;\n\t}\n\treturn nbits;\n};\n\n// returns the number of bits available for data portions (i.e. excludes ECC\n// bits but includes mode and length bits) in this version and ECC level.\nvar ndatabits = function(ver, ecclevel) {\n\tvar nbits = nfullbits(ver) & ~7; // no sub-octet code words\n\tvar v = VERSIONS[ver];\n\tnbits -= 8 * v[0][ecclevel] * v[1][ecclevel]; // ecc bits\n\treturn nbits;\n}\n\n// returns the number of bits required for the length of data.\n// (cf. Table 3 in JIS X 0510:2004 p. 16)\nvar ndatalenbits = function(ver, mode) {\n\tswitch (mode) {\n\tcase MODE_NUMERIC: return (ver < 10 ? 10 : ver < 27 ? 12 : 14);\n\tcase MODE_ALPHANUMERIC: return (ver < 10 ? 9 : ver < 27 ? 11 : 13);\n\tcase MODE_OCTET: return (ver < 10 ? 8 : 16);\n\tcase MODE_KANJI: return (ver < 10 ? 8 : ver < 27 ? 10 : 12);\n\t}\n};\n\n// returns the maximum length of data possible in given configuration.\nvar getmaxdatalen = function(ver, mode, ecclevel) {\n\tvar nbits = ndatabits(ver, ecclevel) - 4 - ndatalenbits(ver, mode); // 4 for mode bits\n\tswitch (mode) {\n\tcase MODE_NUMERIC:\n\t\treturn ((nbits/10) | 0) * 3 + (nbits%10 < 4 ? 0 : nbits%10 < 7 ? 1 : 2);\n\tcase MODE_ALPHANUMERIC:\n\t\treturn ((nbits/11) | 0) * 2 + (nbits%11 < 6 ? 0 : 1);\n\tcase MODE_OCTET:\n\t\treturn (nbits/8) | 0;\n\tcase MODE_KANJI:\n\t\treturn (nbits/13) | 0;\n\t}\n};\n\n// checks if the given data can be encoded in given mode, and returns\n// the converted data for the further processing if possible. otherwise\n// returns null.\n//\n// this function does not check the length of data; it is a duty of\n// encode function below (as it depends on the version and ECC level too).\nvar validatedata = function(mode, data) {\n\tswitch (mode) {\n\tcase MODE_NUMERIC:\n\t\tif (!data.match(NUMERIC_REGEXP)) return null;\n\t\treturn data;\n\n\tcase MODE_ALPHANUMERIC:\n\t\tif (!data.match(ALPHANUMERIC_REGEXP)) return null;\n\t\treturn data.toUpperCase();\n\n\tcase MODE_OCTET:\n\t\tif (typeof data === 'string') { // encode as utf-8 string\n\t\t\tvar newdata = [];\n\t\t\tfor (var i = 0; i < data.length; ++i) {\n\t\t\t\tvar ch = data.charCodeAt(i);\n\t\t\t\tif (ch < 0x80) {\n\t\t\t\t\tnewdata.push(ch);\n\t\t\t\t} else if (ch < 0x800) {\n\t\t\t\t\tnewdata.push(0xc0 | (ch >> 6),\n\t\t\t\t\t\t0x80 | (ch & 0x3f));\n\t\t\t\t} else if (ch < 0x10000) {\n\t\t\t\t\tnewdata.push(0xe0 | (ch >> 12),\n\t\t\t\t\t\t0x80 | ((ch >> 6) & 0x3f),\n\t\t\t\t\t\t0x80 | (ch & 0x3f));\n\t\t\t\t} else {\n\t\t\t\t\tnewdata.push(0xf0 | (ch >> 18),\n\t\t\t\t\t\t0x80 | ((ch >> 12) & 0x3f),\n\t\t\t\t\t\t0x80 | ((ch >> 6) & 0x3f),\n\t\t\t\t\t\t0x80 | (ch & 0x3f));\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn newdata;\n\t\t} else {\n\t\t\treturn data;\n\t\t}\n\t}\n};\n\n// returns the code words (sans ECC bits) for given data and configurations.\n// requires data to be preprocessed by validatedata. no length check is\n// performed, and everything has to be checked before calling this function.\nvar encode = function(ver, mode, data, maxbuflen) {\n\tvar buf = [];\n\tvar bits = 0, remaining = 8;\n\tvar datalen = data.length;\n\n\t// this function is intentionally no-op when n=0.\n\tvar pack = function(x, n) {\n\t\tif (n >= remaining) {\n\t\t\tbuf.push(bits | (x >> (n -= remaining)));\n\t\t\twhile (n >= 8) buf.push((x >> (n -= 8)) & 255);\n\t\t\tbits = 0;\n\t\t\tremaining = 8;\n\t\t}\n\t\tif (n > 0) bits |= (x & ((1 << n) - 1)) << (remaining -= n);\n\t};\n\n\tvar nlenbits = ndatalenbits(ver, mode);\n\tpack(mode, 4);\n\tpack(datalen, nlenbits);\n\n\tswitch (mode) {\n\tcase MODE_NUMERIC:\n\t\tfor (var i = 2; i < datalen; i += 3) {\n\t\t\tpack(parseInt(data.substring(i-2,i+1), 10), 10);\n\t\t}\n\t\tpack(parseInt(data.substring(i-2), 10), [0,4,7][datalen%3]);\n\t\tbreak;\n\n\tcase MODE_ALPHANUMERIC:\n\t\tfor (var i = 1; i < datalen; i += 2) {\n\t\t\tpack(ALPHANUMERIC_MAP[data.charAt(i-1)] * 45 +\n\t\t\t\tALPHANUMERIC_MAP[data.charAt(i)], 11);\n\t\t}\n\t\tif (datalen % 2 == 1) {\n\t\t\tpack(ALPHANUMERIC_MAP[data.charAt(i-1)], 6);\n\t\t}\n\t\tbreak;\n\n\tcase MODE_OCTET:\n\t\tfor (var i = 0; i < datalen; ++i) {\n\t\t\tpack(data[i], 8);\n\t\t}\n\t\tbreak;\n\t};\n\n\t// final bits. it is possible that adding terminator causes the buffer\n\t// to overflow, but then the buffer truncated to the maximum size will\n\t// be valid as the truncated terminator mode bits and padding is\n\t// identical in appearance (cf. JIS X 0510:2004 sec 8.4.8).\n\tpack(MODE_TERMINATOR, 4);\n\tif (remaining < 8) buf.push(bits);\n\n\t// the padding to fill up the remaining space. we should not add any\n\t// words when the overflow already occurred.\n\twhile (buf.length + 1 < maxbuflen) buf.push(0xec, 0x11);\n\tif (buf.length < maxbuflen) buf.push(0xec);\n\treturn buf;\n};\n\n// calculates ECC code words for given code words and generator polynomial.\n//\n// this is quite similar to CRC calculation as both Reed-Solomon and CRC use\n// the certain kind of cyclic codes, which is effectively the division of\n// zero-augumented polynomial by the generator polynomial. the only difference\n// is that Reed-Solomon uses GF(2^8), instead of CRC's GF(2), and Reed-Solomon\n// uses the different generator polynomial than CRC's.\nvar calculateecc = function(poly, genpoly) {\n\tvar modulus = poly.slice(0);\n\tvar polylen = poly.length, genpolylen = genpoly.length;\n\tfor (var i = 0; i < genpolylen; ++i) modulus.push(0);\n\tfor (var i = 0; i < polylen; ) {\n\t\tvar quotient = GF256_INVMAP[modulus[i++]];\n\t\tif (quotient >= 0) {\n\t\t\tfor (var j = 0; j < genpolylen; ++j) {\n\t\t\t\tmodulus[i+j] ^= GF256_MAP[(quotient + genpoly[j]) % 255];\n\t\t\t}\n\t\t}\n\t}\n\treturn modulus.slice(polylen);\n};\n\n// auguments ECC code words to given code words. the resulting words are\n// ready to be encoded in the matrix.\n//\n// the much of actual augumenting procedure follows JIS X 0510:2004 sec 8.7.\n// the code is simplified using the fact that the size of each code & ECC\n// blocks is almost same; for example, when we have 4 blocks and 46 data words\n// the number of code words in those blocks are 11, 11, 12, 12 respectively.\nvar augumenteccs = function(poly, nblocks, genpoly) {\n\tvar subsizes = [];\n\tvar subsize = (poly.length / nblocks) | 0, subsize0 = 0;\n\tvar pivot = nblocks - poly.length % nblocks;\n\tfor (var i = 0; i < pivot; ++i) {\n\t\tsubsizes.push(subsize0);\n\t\tsubsize0 += subsize;\n\t}\n\tfor (var i = pivot; i < nblocks; ++i) {\n\t\tsubsizes.push(subsize0);\n\t\tsubsize0 += subsize+1;\n\t}\n\tsubsizes.push(subsize0);\n\n\tvar eccs = [];\n\tfor (var i = 0; i < nblocks; ++i) {\n\t\teccs.push(calculateecc(poly.slice(subsizes[i], subsizes[i+1]), genpoly));\n\t}\n\n\tvar result = [];\n\tvar nitemsperblock = (poly.length / nblocks) | 0;\n\tfor (var i = 0; i < nitemsperblock; ++i) {\n\t\tfor (var j = 0; j < nblocks; ++j) {\n\t\t\tresult.push(poly[subsizes[j] + i]);\n\t\t}\n\t}\n\tfor (var j = pivot; j < nblocks; ++j) {\n\t\tresult.push(poly[subsizes[j+1] - 1]);\n\t}\n\tfor (var i = 0; i < genpoly.length; ++i) {\n\t\tfor (var j = 0; j < nblocks; ++j) {\n\t\t\tresult.push(eccs[j][i]);\n\t\t}\n\t}\n\treturn result;\n};\n\n// auguments BCH(p+q,q) code to the polynomial over GF(2), given the proper\n// genpoly. the both input and output are in binary numbers, and unlike\n// calculateecc genpoly should include the 1 bit for the highest degree.\n//\n// actual polynomials used for this procedure are as follows:\n// - p=10, q=5, genpoly=x^10+x^8+x^5+x^4+x^2+x+1 (JIS X 0510:2004 Appendix C)\n// - p=18, q=6, genpoly=x^12+x^11+x^10+x^9+x^8+x^5+x^2+1 (ibid. Appendix D)\nvar augumentbch = function(poly, p, genpoly, q) {\n\tvar modulus = poly << q;\n\tfor (var i = p - 1; i >= 0; --i) {\n\t\tif ((modulus >> (q+i)) & 1) modulus ^= genpoly << i;\n\t}\n\treturn (poly << q) | modulus;\n};\n\n// creates the base matrix for given version. it returns two matrices, one of\n// them is the actual one and the another represents the \"reserved\" portion\n// (e.g. finder and timing patterns) of the matrix.\n//\n// some entries in the matrix may be undefined, rather than 0 or 1. this is\n// intentional (no initialization needed!), and putdata below will fill\n// the remaining ones.\nvar makebasematrix = function(ver) {\n\tvar v = VERSIONS[ver], n = getsizebyver(ver);\n\tvar matrix = [], reserved = [];\n\tfor (var i = 0; i < n; ++i) {\n\t\tmatrix.push([]);\n\t\treserved.push([]);\n\t}\n\n\tvar blit = function(y, x, h, w, bits) {\n\t\tfor (var i = 0; i < h; ++i) {\n\t\t\tfor (var j = 0; j < w; ++j) {\n\t\t\t\tmatrix[y+i][x+j] = (bits[i] >> j) & 1;\n\t\t\t\treserved[y+i][x+j] = 1;\n\t\t\t}\n\t\t}\n\t};\n\n\t// finder patterns and a part of timing patterns\n\t// will also mark the format information area (not yet written) as reserved.\n\tblit(0, 0, 9, 9, [0x7f, 0x41, 0x5d, 0x5d, 0x5d, 0x41, 0x17f, 0x00, 0x40]);\n\tblit(n-8, 0, 8, 9, [0x100, 0x7f, 0x41, 0x5d, 0x5d, 0x5d, 0x41, 0x7f]);\n\tblit(0, n-8, 9, 8, [0xfe, 0x82, 0xba, 0xba, 0xba, 0x82, 0xfe, 0x00, 0x00]);\n\n\t// the rest of timing patterns\n\tfor (var i = 9; i < n-8; ++i) {\n\t\tmatrix[6][i] = matrix[i][6] = ~i & 1;\n\t\treserved[6][i] = reserved[i][6] = 1;\n\t}\n\n\t// alignment patterns\n\tvar aligns = v[2], m = aligns.length;\n\tfor (var i = 0; i < m; ++i) {\n\t\tvar minj = (i==0 || i==m-1 ? 1 : 0), maxj = (i==0 ? m-1 : m);\n\t\tfor (var j = minj; j < maxj; ++j) {\n\t\t\tblit(aligns[i], aligns[j], 5, 5, [0x1f, 0x11, 0x15, 0x11, 0x1f]);\n\t\t}\n\t}\n\n\t// version information\n\tif (needsverinfo(ver)) {\n\t\tvar code = augumentbch(ver, 6, 0x1f25, 12);\n\t\tvar k = 0;\n\t\tfor (var i = 0; i < 6; ++i) {\n\t\t\tfor (var j = 0; j < 3; ++j) {\n\t\t\t\tmatrix[i][(n-11)+j] = matrix[(n-11)+j][i] = (code >> k++) & 1;\n\t\t\t\treserved[i][(n-11)+j] = reserved[(n-11)+j][i] = 1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn {matrix: matrix, reserved: reserved};\n};\n\n// fills the data portion (i.e. unmarked in reserved) of the matrix with given\n// code words. the size of code words should be no more than available bits,\n// and remaining bits are padded to 0 (cf. JIS X 0510:2004 sec 8.7.3).\nvar putdata = function(matrix, reserved, buf) {\n\tvar n = matrix.length;\n\tvar k = 0, dir = -1;\n\tfor (var i = n-1; i >= 0; i -= 2) {\n\t\tif (i == 6) --i; // skip the entire timing pattern column\n\t\tvar jj = (dir < 0 ? n-1 : 0);\n\t\tfor (var j = 0; j < n; ++j) {\n\t\t\tfor (var ii = i; ii > i-2; --ii) {\n\t\t\t\tif (!reserved[jj][ii]) {\n\t\t\t\t\t// may overflow, but (undefined >> x)\n\t\t\t\t\t// is 0 so it will auto-pad to zero.\n\t\t\t\t\tmatrix[jj][ii] = (buf[k >> 3] >> (~k&7)) & 1;\n\t\t\t\t\t++k;\n\t\t\t\t}\n\t\t\t}\n\t\t\tjj += dir;\n\t\t}\n\t\tdir = -dir;\n\t}\n\treturn matrix;\n};\n\n// XOR-masks the data portion of the matrix. repeating the call with the same\n// arguments will revert the prior call (convenient in the matrix evaluation).\nvar maskdata = function(matrix, reserved, mask) {\n\tvar maskf = MASKFUNCS[mask];\n\tvar n = matrix.length;\n\tfor (var i = 0; i < n; ++i) {\n\t\tfor (var j = 0; j < n; ++j) {\n\t\t\tif (!reserved[i][j]) matrix[i][j] ^= maskf(i,j);\n\t\t}\n\t}\n\treturn matrix;\n}\n\n// puts the format information.\nvar putformatinfo = function(matrix, reserved, ecclevel, mask) {\n\tvar n = matrix.length;\n\tvar code = augumentbch((ecclevel << 3) | mask, 5, 0x537, 10) ^ 0x5412;\n\tfor (var i = 0; i < 15; ++i) {\n\t\tvar r = [0,1,2,3,4,5,7,8,n-7,n-6,n-5,n-4,n-3,n-2,n-1][i];\n\t\tvar c = [n-1,n-2,n-3,n-4,n-5,n-6,n-7,n-8,7,5,4,3,2,1,0][i];\n\t\tmatrix[r][8] = matrix[8][c] = (code >> i) & 1;\n\t\t// we don't have to mark those bits reserved; always done\n\t\t// in makebasematrix above.\n\t}\n\treturn matrix;\n};\n\n// evaluates the resulting matrix and returns the score (lower is better).\n// (cf. JIS X 0510:2004 sec 8.8.2)\n//\n// the evaluation procedure tries to avoid the problematic patterns naturally\n// occuring from the original matrix. for example, it penaltizes the patterns\n// which just look like the finder pattern which will confuse the decoder.\n// we choose the mask which results in the lowest score among 8 possible ones.\n//\n// note: zxing seems to use the same procedure and in many cases its choice\n// agrees to ours, but sometimes it does not. practically it doesn't matter.\nvar evaluatematrix = function(matrix) {\n\t// N1+(k-5) points for each consecutive row of k same-colored modules,\n\t// where k >= 5. no overlapping row counts.\n\tvar PENALTY_CONSECUTIVE = 3;\n\t// N2 points for each 2x2 block of same-colored modules.\n\t// overlapping block does count.\n\tvar PENALTY_TWOBYTWO = 3;\n\t// N3 points for each pattern with >4W:1B:1W:3B:1W:1B or\n\t// 1B:1W:3B:1W:1B:>4W, or their multiples (e.g. highly unlikely,\n\t// but 13W:3B:3W:9B:3W:3B counts).\n\tvar PENALTY_FINDERLIKE = 40;\n\t// N4*k points for every (5*k)% deviation from 50% black density.\n\t// i.e. k=1 for 55~60% and 40~45%, k=2 for 60~65% and 35~40%, etc.\n\tvar PENALTY_DENSITY = 10;\n\n\tvar evaluategroup = function(groups) { // assumes [W,B,W,B,W,...,B,W]\n\t\tvar score = 0;\n\t\tfor (var i = 0; i < groups.length; ++i) {\n\t\t\tif (groups[i] >= 5) score += PENALTY_CONSECUTIVE + (groups[i]-5);\n\t\t}\n\t\tfor (var i = 5; i < groups.length; i += 2) {\n\t\t\tvar p = groups[i];\n\t\t\tif (groups[i-1] == p && groups[i-2] == 3*p && groups[i-3] == p &&\n\t\t\t\t\tgroups[i-4] == p && (groups[i-5] >= 4*p || groups[i+1] >= 4*p)) {\n\t\t\t\t// this part differs from zxing...\n\t\t\t\tscore += PENALTY_FINDERLIKE;\n\t\t\t}\n\t\t}\n\t\treturn score;\n\t};\n\n\tvar n = matrix.length;\n\tvar score = 0, nblacks = 0;\n\tfor (var i = 0; i < n; ++i) {\n\t\tvar row = matrix[i];\n\t\tvar groups;\n\n\t\t// evaluate the current row\n\t\tgroups = [0]; // the first empty group of white\n\t\tfor (var j = 0; j < n; ) {\n\t\t\tvar k;\n\t\t\tfor (k = 0; j < n && row[j]; ++k) ++j;\n\t\t\tgroups.push(k);\n\t\t\tfor (k = 0; j < n && !row[j]; ++k) ++j;\n\t\t\tgroups.push(k);\n\t\t}\n\t\tscore += evaluategroup(groups);\n\n\t\t// evaluate the current column\n\t\tgroups = [0];\n\t\tfor (var j = 0; j < n; ) {\n\t\t\tvar k;\n\t\t\tfor (k = 0; j < n && matrix[j][i]; ++k) ++j;\n\t\t\tgroups.push(k);\n\t\t\tfor (k = 0; j < n && !matrix[j][i]; ++k) ++j;\n\t\t\tgroups.push(k);\n\t\t}\n\t\tscore += evaluategroup(groups);\n\n\t\t// check the 2x2 box and calculate the density\n\t\tvar nextrow = matrix[i+1] || [];\n\t\tnblacks += row[0];\n\t\tfor (var j = 1; j < n; ++j) {\n\t\t\tvar p = row[j];\n\t\t\tnblacks += p;\n\t\t\t// at least comparison with next row should be strict...\n\t\t\tif (row[j-1] == p && nextrow[j] === p && nextrow[j-1] === p) {\n\t\t\t\tscore += PENALTY_TWOBYTWO;\n\t\t\t}\n\t\t}\n\t}\n\n\tscore += PENALTY_DENSITY * ((Math.abs(nblacks / n / n - 0.5) / 0.05) | 0);\n\treturn score;\n};\n\n// returns the fully encoded QR code matrix which contains given data.\n// it also chooses the best mask automatically when mask is -1.\nvar generate = function(data, ver, mode, ecclevel, mask) {\n\tvar v = VERSIONS[ver];\n\tvar buf = encode(ver, mode, data, ndatabits(ver, ecclevel) >> 3);\n\tbuf = augumenteccs(buf, v[1][ecclevel], GF256_GENPOLY[v[0][ecclevel]]);\n\n\tvar result = makebasematrix(ver);\n\tvar matrix = result.matrix, reserved = result.reserved;\n\tputdata(matrix, reserved, buf);\n\n\tif (mask < 0) {\n\t\t// find the best mask\n\t\tmaskdata(matrix, reserved, 0);\n\t\tputformatinfo(matrix, reserved, ecclevel, 0);\n\t\tvar bestmask = 0, bestscore = evaluatematrix(matrix);\n\t\tmaskdata(matrix, reserved, 0);\n\t\tfor (mask = 1; mask < 8; ++mask) {\n\t\t\tmaskdata(matrix, reserved, mask);\n\t\t\tputformatinfo(matrix, reserved, ecclevel, mask);\n\t\t\tvar score = evaluatematrix(matrix);\n\t\t\tif (bestscore > score) {\n\t\t\t\tbestscore = score;\n\t\t\t\tbestmask = mask;\n\t\t\t}\n\t\t\tmaskdata(matrix, reserved, mask);\n\t\t}\n\t\tmask = bestmask;\n\t}\n\n\tmaskdata(matrix, reserved, mask);\n\tputformatinfo(matrix, reserved, ecclevel, mask);\n\treturn matrix;\n};\n\n// the public interface is trivial; the options available are as follows:\n//\n// - version: an integer in [1,40]. when omitted (or -1) the smallest possible\n//   version is chosen.\n// - mode: one of 'numeric', 'alphanumeric', 'octet'. when omitted the smallest\n//   possible mode is chosen.\n// - ecclevel: one of 'L', 'M', 'Q', 'H'. defaults to 'L'.\n// - mask: an integer in [0,7]. when omitted (or -1) the best mask is chosen.\n//\n// for generate{HTML,PNG}:\n//\n// - modulesize: a number. this is a size of each modules in pixels, and\n//   defaults to 5px.\n// - margin: a number. this is a size of margin in *modules*, and defaults to\n//   4 (white modules). the specficiation mandates the margin no less than 4\n//   modules, so it is better not to alter this value unless you know what\n//   you're doing.\nvar QRCode = {\n\t'generate': function(data, options) {\n\t\tvar MODES = {'numeric': MODE_NUMERIC, 'alphanumeric': MODE_ALPHANUMERIC,\n\t\t\t'octet': MODE_OCTET};\n\t\tvar ECCLEVELS = {'L': ECCLEVEL_L, 'M': ECCLEVEL_M, 'Q': ECCLEVEL_Q,\n\t\t\t'H': ECCLEVEL_H};\n\n\t\toptions = options || {};\n\t\tvar ver = options.version || -1;\n\t\tvar ecclevel = ECCLEVELS[(options.ecclevel || 'L').toUpperCase()];\n\t\tvar mode = options.mode ? MODES[options.mode.toLowerCase()] : -1;\n\t\tvar mask = 'mask' in options ? options.mask : -1;\n\n\t\tif (mode < 0) {\n\t\t\tif (typeof data === 'string') {\n\t\t\t\tif (data.match(NUMERIC_REGEXP)) {\n\t\t\t\t\tmode = MODE_NUMERIC;\n\t\t\t\t} else if (data.match(ALPHANUMERIC_OUT_REGEXP)) {\n\t\t\t\t\t// while encode supports case-insensitive\n\t\t\t\t\t// encoding, we restrict the data to be\n\t\t\t\t\t// uppercased when auto-selecting the mode.\n\t\t\t\t\tmode = MODE_ALPHANUMERIC;\n\t\t\t\t} else {\n\t\t\t\t\tmode = MODE_OCTET;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmode = MODE_OCTET;\n\t\t\t}\n\t\t} else if (!(mode == MODE_NUMERIC || mode == MODE_ALPHANUMERIC ||\n\t\t\t\tmode == MODE_OCTET)) {\n\t\t\tthrow 'invalid or unsupported mode';\n\t\t}\n\n\t\tdata = validatedata(mode, data);\n\t\tif (data === null) throw 'invalid data format';\n\n\t\tif (ecclevel < 0 || ecclevel > 3) throw 'invalid ECC level';\n\n\t\tif (ver < 0) {\n\t\t\tfor (ver = 1; ver <= 40; ++ver) {\n\t\t\t\tif (data.length <= getmaxdatalen(ver, mode, ecclevel)) break;\n\t\t\t}\n\t\t\tif (ver > 40) throw 'too large data';\n\t\t} else if (ver < 1 || ver > 40) {\n\t\t\tthrow 'invalid version';\n\t\t}\n\n\t\tif (mask != -1 && (mask < 0 || mask > 8)) throw 'invalid mask';\n\n\t\treturn generate(data, ver, mode, ecclevel, mask);\n\t},\n\n\t'generateHTML': function(data, options) {\n\t\toptions = options || {};\n\t\tvar matrix = QRCode['generate'](data, options);\n\t\tvar modsize = Math.max(options.modulesize || 5, 0.5);\n\t\tvar margin = Math.max(options.margin !== null ? options.margin : 4, 0.0);\n\n\t\tvar e = document.createElement('div');\n\t\tvar n = matrix.length;\n\t\tvar html = ['<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\" style=\"border:' +\n\t\t\tmodsize*margin + 'px solid #fff;background:#fff\">'];\n\t\tfor (var i = 0; i < n; ++i) {\n\t\t\thtml.push('<tr>');\n\t\t\tfor (var j = 0; j < n; ++j) {\n\t\t\t\thtml.push('<td style=\"width:' + modsize + 'px;height:' + modsize + 'px' +\n\t\t\t\t\t(matrix[i][j] ? ';background:#000' : '') + '\"></td>');\n\t\t\t}\n\t\t\thtml.push('</tr>');\n\t\t}\n\t\te.className = 'qrcode';\n\t\te.innerHTML = html.join('') + '</table>';\n\t\treturn e;\n\t},\n\n\t'generateSVG': function(data, options) {\n\t\toptions = options || {};\n\t\tvar matrix = QRCode['generate'](data, options);\n\t\tvar n = matrix.length;\n\t\tvar modsize = Math.max(options.modulesize || 5, 0.5);\n\t\tvar margin = Math.max(options.margin !== null ? options.margin : 4, 0.0);\n\t\tvar size = modsize * (n + 2 * margin);\n\n\t\tvar common = ' class= \"fg\"'+' width=\"'+modsize+'\" height=\"'+modsize+'\"/>';\n\n\t\tvar e = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n\t\te.setAttribute('viewBox', '0 0 '+size+' '+size);\n\t\te.setAttribute('style', 'shape-rendering:crispEdges');\n\t\tif (options.modulesize) {\n            e.setAttribute('width', size);\n            e.setAttribute('height', size);\n        }\n\n\t\tvar svg = [\n\t\t\t'<style scoped>.bg{fill:#FFF}.fg{fill:#000}</style>',\n\t\t\t'<rect class=\"bg\" x=\"0\" y=\"0\"',\n\t\t\t'width=\"'+size+'\" height=\"'+size+'\"/>',\n\t\t];\n\n\t\tvar yo = margin * modsize;\n\t\tfor (var y = 0; y < n; ++y) {\n\t\t\tvar xo = margin * modsize;\n\t\t\tfor (var x = 0; x < n; ++x) {\n\t\t\t\tif (matrix[y][x])\n\t\t\t\t\tsvg.push('<rect x=\"'+xo+'\" y=\"'+yo+'\"', common);\n\t\t\t\txo += modsize;\n\t\t\t}\n\t\t\tyo += modsize;\n\t\t}\n\t\te.innerHTML = svg.join('');\n\t\treturn e;\n\t},\n\n\t'generatePNG': function(data, options) {\n\t\toptions = options || {};\n\t\tvar matrix = QRCode['generate'](data, options);\n\t\tvar modsize = Math.max(options.modulesize || 5, 0.5);\n\t\tvar margin = Math.max(options.margin !== null ? options.margin : 4, 0.0);\n\t\tvar n = matrix.length;\n\t\tvar size = modsize * (n + 2 * margin);\n\n\t\tvar canvas = document.createElement('canvas'), context;\n\t\tcanvas.width = canvas.height = size;\n\t\tcontext = canvas.getContext('2d');\n\t\tif (!context) throw 'canvas support is needed for PNG output';\n\n\t\tcontext.fillStyle = '#fff';\n\t\tcontext.fillRect(0, 0, size, size);\n\t\tcontext.fillStyle = '#000';\n\t\tfor (var i = 0; i < n; ++i) {\n\t\t\tfor (var j = 0; j < n; ++j) {\n\t\t\t\tif (matrix[i][j]) {\n\t\t\t\t\tcontext.fillRect(modsize * (margin + j),\n\t\t\t\t\t\tmodsize * (margin + i),\n\t\t\t\t\t\tmodsize, modsize);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//context.fillText('evaluation: ' + evaluatematrix(matrix), 10, 10);\n\t\treturn canvas.toDataURL();\n\t}\n};\n\nreturn QRCode;\n});\n","import _QRCode from 'qrjs'\n\nexport default class QRCode extends HTMLElement {\n    constructor() {\n        super()\n        // method bindings\n        this._defineProperty = this._defineProperty.bind(this)\n        // Shadow DOM\n        this.attachShadow({ mode: 'open' })\n        // Define Properties\n        Object.keys(QRCode.defaultAttributes).map(this._defineProperty)\n    }\n    static get defaultAttributes() {\n        return { \n            data: null,\n            format: 'png',\n            modulesize: 5,\n            margin: 4\n        }\n    }\n    static get observedAttributes() {\n        return Object.keys(QRCode.defaultAttributes)\n    }\n    // LifeCycle Callbacks\n    //\n    attributeChangedCallback(attributeName, oldValue, newValue) {\n        let fn = this[attributeName+'Changed']\n        if (fn && typeof fn === 'function') {\n            fn.call(this, oldValue, newValue)\n        }\n        this.generate()\n    }\n    // Methods\n    //\n    _defineProperty(attributeName) {\n        Object.defineProperty(this, attributeName, {\n            get: () => {\n                let value = this.getAttribute(attributeName)\n                return value === null ? QRCode.defaultAttributes[attributeName] : value\n            },\n            set: value => {\n                this.setAttribute(attributeName, value)\n            }\n        })\n    }\n    getOptions() {\n        let { modulesize, margin } = this\n        return {\n            modulesize: modulesize !== null ? parseInt(modulesize) : modulesize,\n            margin: margin !== null ? parseInt(margin) : margin\n        }\n    }\n    generate() {\n        if (this.data !== null) {\n            if (this.format === 'png') {\n                this.generatePNG()\n            }\n            else if (this.format === 'html') {\n                this.generateHTML()\n            }\n            else if (this.format === 'svg') {\n                this.generateSVG()\n            }\n            else {\n                this.shadowRoot.innerHTML = '<div>qr-code: '+ this.format +' not supported!</div>'\n            }\n        }\n        else {\n            this.shadowRoot.innerHTML = '<div>qr-code: no data!</div>'\n        }\n    }\n    generatePNG() {\n        try {\n            let img = document.createElement('img')\n            img.src = _QRCode.generatePNG(this.data, this.getOptions())\n            this.clear()\n            this.shadowRoot.appendChild(img)\n        }\n        catch (e) {\n            this.shadowRoot.innerHTML = '<div>qr-code: no canvas support!</div>'\n        }\n    }\n    generateHTML() {\n        let div = _QRCode.generateHTML(this.data, this.getOptions())\n        this.clear()\n        this.shadowRoot.appendChild(div)\n    }\n    generateSVG() {\n        let div = _QRCode.generateSVG(this.data, this.getOptions())\n        this.clear()\n        this.shadowRoot.appendChild(div)\n    }\n    clear() {\n        while (this.shadowRoot.lastChild) {\n            this.shadowRoot.removeChild(this.shadowRoot.lastChild)\n        }\n    }\n}\n"],"names":["root","definition","this","VERSIONS","NUMERIC_REGEXP","ALPHANUMERIC_REGEXP","ALPHANUMERIC_OUT_REGEXP","GF256_MAP","GF256_INVMAP","i","v","push","GF256_GENPOLY","prevpoly","poly","j","a","b","ALPHANUMERIC_MAP","charAt","MASKFUNCS","needsverinfo","ver","ndatabits","ecclevel","nbits","length","nfullbits","ndatalenbits","mode","getmaxdatalen","calculateecc","genpoly","modulus","slice","polylen","genpolylen","quotient","augumentbch","p","q","maskdata","matrix","reserved","mask","maskf","n","putformatinfo","code","c","evaluatematrix","evaluategroup","groups","score","nblacks","row","k","nextrow","Math","abs","generate","data","buf","maxbuflen","bits","remaining","datalen","pack","x","nlenbits","parseInt","substring","encode","nblocks","subsizes","subsize","subsize0","pivot","eccs","result","nitemsperblock","augumenteccs","getsizebyver","blit","y","h","w","aligns","m","maxj","makebasematrix","dir","jj","ii","putdata","bestmask","bestscore","QRCode","options","MODES","ECCLEVELS","version","toUpperCase","toLowerCase","match","newdata","ch","charCodeAt","validatedata","modsize","max","modulesize","margin","e","document","createElement","html","className","innerHTML","join","size","common","createElementNS","setAttribute","svg","yo","xo","context","canvas","width","height","getContext","fillStyle","fillRect","toDataURL","module","exports","HTMLElement","constructor","_defineProperty","bind","attachShadow","Object","keys","defaultAttributes","map","format","attributeChangedCallback","attributeName","oldValue","newValue","fn","call","defineProperty","get","value","getAttribute","set","getOptions","generatePNG","generateHTML","generateSVG","shadowRoot","img","src","_QRCode","clear","appendChild","div","lastChild","removeChild"],"mappings":"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"}