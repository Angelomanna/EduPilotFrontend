{"version":3,"file":"dbp-lit-element.0e6946f2.es.js","sources":["../../node_modules/lit-html/lib/dom.js","../../node_modules/lit-html/lib/template.js","../../node_modules/lit-html/lib/modify-template.js","../../node_modules/lit-html/lib/directive.js","../../node_modules/lit-html/lib/part.js","../../node_modules/lit-html/lib/template-instance.js","../../node_modules/lit-html/lib/template-result.js","../../node_modules/lit-html/lib/parts.js","../../node_modules/lit-html/lib/template-factory.js","../../node_modules/lit-html/lib/render.js","../../node_modules/lit-html/lib/default-template-processor.js","../../node_modules/lit-html/lit-html.js","../../node_modules/lit-html/lib/shady-render.js","../../node_modules/lit-element/lib/updating-element.js","../../node_modules/lit-element/lib/css-tag.js","../../node_modules/lit-element/lit-element.js","../../node_modules/@open-wc/dedupe-mixin/src/dedupeMixin.js","../../node_modules/@open-wc/scoped-elements/src/Cache.js","../../node_modules/@open-wc/scoped-elements/src/createUniqueTag.js","../../node_modules/@open-wc/scoped-elements/src/globalTagsCache.js","../../node_modules/@open-wc/scoped-elements/src/registerElement.js","../../node_modules/@open-wc/scoped-elements/src/transform.js","../../node_modules/@open-wc/scoped-elements/src/shadyTemplateFactory.js","../../node_modules/@open-wc/scoped-elements/src/ScopedElementsMixin.js","../../vendor/toolkit/packages/common/utils.js","../../node_modules/lit-html/directives/unsafe-html.js","../../node_modules/lit-html/directives/until.js","../../vendor/toolkit/packages/common/src/icon.js","../../vendor/toolkit/packages/common/src/mini-spinner.js","../../vendor/toolkit/packages/common/styles.js","../../vendor/toolkit/packages/common/src/button.js","../../vendor/toolkit/packages/common/dbp-lit-element.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = typeof window !== 'undefined' &&\n    window.customElements != null &&\n    window.customElements.polyfillWrapFlushCallback !==\n        undefined;\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.insertBefore(start, before);\n        start = n;\n    }\n};\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes = (container, start, end = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.removeChild(start);\n        start = n;\n    }\n};\n//# sourceMappingURL=dom.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n/**\n * An updatable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        const nodesToRemove = [];\n        const stack = [];\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(element.content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        // Keeps track of the last index associated with a part. We try to delete\n        // unnecessary nodes, but we never want to associate two different parts\n        // to the same index. They must have a constant node between.\n        let lastPartIndex = 0;\n        let index = -1;\n        let partIndex = 0;\n        const { strings, values: { length } } = result;\n        while (partIndex < length) {\n            const node = walker.nextNode();\n            if (node === null) {\n                // We've exhausted the content inside a nested template element.\n                // Because we still have parts (the outer for-loop), we know:\n                // - There is a template in the stack\n                // - The walker will find a nextNode outside the template\n                walker.currentNode = stack.pop();\n                continue;\n            }\n            index++;\n            if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                if (node.hasAttributes()) {\n                    const attributes = node.attributes;\n                    const { length } = attributes;\n                    // Per\n                    // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                    // attributes are not guaranteed to be returned in document order.\n                    // In particular, Edge/IE can return them out of order, so we cannot\n                    // assume a correspondence between part index and attribute index.\n                    let count = 0;\n                    for (let i = 0; i < length; i++) {\n                        if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n                            count++;\n                        }\n                    }\n                    while (count-- > 0) {\n                        // Get the template literal section leading up to the first\n                        // expression in this attribute\n                        const stringForPart = strings[partIndex];\n                        // Find the attribute name\n                        const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                        // Find the corresponding attribute\n                        // All bound attributes have had a suffix added in\n                        // TemplateResult#getHTML to opt out of special attribute\n                        // handling. To look up the attribute value we also need to add\n                        // the suffix.\n                        const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;\n                        const attributeValue = node.getAttribute(attributeLookupName);\n                        node.removeAttribute(attributeLookupName);\n                        const statics = attributeValue.split(markerRegex);\n                        this.parts.push({ type: 'attribute', index, name, strings: statics });\n                        partIndex += statics.length - 1;\n                    }\n                }\n                if (node.tagName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n            }\n            else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                const data = node.data;\n                if (data.indexOf(marker) >= 0) {\n                    const parent = node.parentNode;\n                    const strings = data.split(markerRegex);\n                    const lastIndex = strings.length - 1;\n                    // Generate a new text node for each literal section\n                    // These nodes are also used as the markers for node parts\n                    for (let i = 0; i < lastIndex; i++) {\n                        let insert;\n                        let s = strings[i];\n                        if (s === '') {\n                            insert = createMarker();\n                        }\n                        else {\n                            const match = lastAttributeNameRegex.exec(s);\n                            if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                                s = s.slice(0, match.index) + match[1] +\n                                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n                            }\n                            insert = document.createTextNode(s);\n                        }\n                        parent.insertBefore(insert, node);\n                        this.parts.push({ type: 'node', index: ++index });\n                    }\n                    // If there's no text, we must insert a comment to mark our place.\n                    // Else, we can trust it will stick around after cloning.\n                    if (strings[lastIndex] === '') {\n                        parent.insertBefore(createMarker(), node);\n                        nodesToRemove.push(node);\n                    }\n                    else {\n                        node.data = strings[lastIndex];\n                    }\n                    // We have a part for each match found\n                    partIndex += lastIndex;\n                }\n            }\n            else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                if (node.data === marker) {\n                    const parent = node.parentNode;\n                    // Add a new marker node to be the startNode of the Part if any of\n                    // the following are true:\n                    //  * We don't have a previousSibling\n                    //  * The previousSibling is already the start of a previous part\n                    if (node.previousSibling === null || index === lastPartIndex) {\n                        index++;\n                        parent.insertBefore(createMarker(), node);\n                    }\n                    lastPartIndex = index;\n                    this.parts.push({ type: 'node', index });\n                    // If we don't have a nextSibling, keep this node so we have an end.\n                    // Else, we can remove it to save future costs.\n                    if (node.nextSibling === null) {\n                        node.data = '';\n                    }\n                    else {\n                        nodesToRemove.push(node);\n                        index--;\n                    }\n                    partIndex++;\n                }\n                else {\n                    let i = -1;\n                    while ((i = node.data.indexOf(marker, i + 1)) !== -1) {\n                        // Comment node has a binding marker inside, make an inactive part\n                        // The binding won't work, but subsequent bindings will\n                        // TODO (justinfagnani): consider whether it's even worth it to\n                        // make bindings in comments work\n                        this.parts.push({ type: 'node', index: -1 });\n                        partIndex++;\n                    }\n                }\n            }\n        }\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nconst endsWith = (str, suffix) => {\n    const index = str.length - suffix.length;\n    return index >= 0 && str.slice(index) === suffix;\n};\nexport const isTemplatePartActive = (part) => part.index !== -1;\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex = \n// eslint-disable-next-line no-control-regex\n/([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n//# sourceMappingURL=template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { isTemplatePartActive } from './template.js';\nconst walkerNodeFilter = 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */;\n/**\n * Removes the list of nodes from a Template safely. In addition to removing\n * nodes from the Template, the Template part indices are updated to match\n * the mutated Template DOM.\n *\n * As the template is walked the removal state is tracked and\n * part indices are adjusted as needed.\n *\n * div\n *   div#1 (remove) <-- start removing (removing node is div#1)\n *     div\n *       div#2 (remove)  <-- continue removing (removing node is still div#1)\n *         div\n * div <-- stop removing since previous sibling is the removing node (div#1,\n * removed 4 nodes)\n */\nexport function removeNodesFromTemplate(template, nodesToRemove) {\n    const { element: { content }, parts } = template;\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let part = parts[partIndex];\n    let nodeIndex = -1;\n    let removeCount = 0;\n    const nodesToRemoveInTemplate = [];\n    let currentRemovingNode = null;\n    while (walker.nextNode()) {\n        nodeIndex++;\n        const node = walker.currentNode;\n        // End removal if stepped past the removing node\n        if (node.previousSibling === currentRemovingNode) {\n            currentRemovingNode = null;\n        }\n        // A node to remove was found in the template\n        if (nodesToRemove.has(node)) {\n            nodesToRemoveInTemplate.push(node);\n            // Track node we're removing\n            if (currentRemovingNode === null) {\n                currentRemovingNode = node;\n            }\n        }\n        // When removing, increment count by which to adjust subsequent part indices\n        if (currentRemovingNode !== null) {\n            removeCount++;\n        }\n        while (part !== undefined && part.index === nodeIndex) {\n            // If part is in a removed node deactivate it by setting index to -1 or\n            // adjust the index as needed.\n            part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;\n            // go to the next active part.\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n            part = parts[partIndex];\n        }\n    }\n    nodesToRemoveInTemplate.forEach((n) => n.parentNode.removeChild(n));\n}\nconst countNodes = (node) => {\n    let count = (node.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */) ? 0 : 1;\n    const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);\n    while (walker.nextNode()) {\n        count++;\n    }\n    return count;\n};\nconst nextActiveIndexInTemplateParts = (parts, startIndex = -1) => {\n    for (let i = startIndex + 1; i < parts.length; i++) {\n        const part = parts[i];\n        if (isTemplatePartActive(part)) {\n            return i;\n        }\n    }\n    return -1;\n};\n/**\n * Inserts the given node into the Template, optionally before the given\n * refNode. In addition to inserting the node into the Template, the Template\n * part indices are updated to match the mutated Template DOM.\n */\nexport function insertNodeIntoTemplate(template, node, refNode = null) {\n    const { element: { content }, parts } = template;\n    // If there's no refNode, then put node at end of template.\n    // No part indices need to be shifted in this case.\n    if (refNode === null || refNode === undefined) {\n        content.appendChild(node);\n        return;\n    }\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let insertCount = 0;\n    let walkerIndex = -1;\n    while (walker.nextNode()) {\n        walkerIndex++;\n        const walkerNode = walker.currentNode;\n        if (walkerNode === refNode) {\n            insertCount = countNodes(node);\n            refNode.parentNode.insertBefore(node, refNode);\n        }\n        while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {\n            // If we've inserted the node, simply adjust all subsequent parts\n            if (insertCount > 0) {\n                while (partIndex !== -1) {\n                    parts[partIndex].index += insertCount;\n                    partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n                }\n                return;\n            }\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n        }\n    }\n}\n//# sourceMappingURL=modify-template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst directives = new WeakMap();\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nexport const directive = (f) => ((...args) => {\n    const d = f(...args);\n    directives.set(d, true);\n    return d;\n});\nexport const isDirective = (o) => {\n    return typeof o === 'function' && directives.has(o);\n};\n//# sourceMappingURL=directive.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n//# sourceMappingURL=part.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { isCEPolyfill } from './dom.js';\nimport { isTemplatePartActive } from './template.js';\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, processor, options) {\n        this.__parts = [];\n        this.template = template;\n        this.processor = processor;\n        this.options = options;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n            }\n            i++;\n        }\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.commit();\n            }\n        }\n    }\n    _clone() {\n        // There are a number of steps in the lifecycle of a template instance's\n        // DOM fragment:\n        //  1. Clone - create the instance fragment\n        //  2. Adopt - adopt into the main document\n        //  3. Process - find part markers and create parts\n        //  4. Upgrade - upgrade custom elements\n        //  5. Update - set node, attribute, property, etc., values\n        //  6. Connect - connect to the document. Optional and outside of this\n        //     method.\n        //\n        // We have a few constraints on the ordering of these steps:\n        //  * We need to upgrade before updating, so that property values will pass\n        //    through any property setters.\n        //  * We would like to process before upgrading so that we're sure that the\n        //    cloned fragment is inert and not disturbed by self-modifying DOM.\n        //  * We want custom elements to upgrade even in disconnected fragments.\n        //\n        // Given these constraints, with full custom elements support we would\n        // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n        //\n        // But Safari does not implement CustomElementRegistry#upgrade, so we\n        // can not implement that order and still have upgrade-before-update and\n        // upgrade disconnected fragments. So we instead sacrifice the\n        // process-before-upgrade constraint, since in Custom Elements v1 elements\n        // must not modify their light DOM in the constructor. We still have issues\n        // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n        // that don't strictly adhere to the no-modification rule because shadow\n        // DOM, which may be created in the constructor, is emulated by being placed\n        // in the light DOM.\n        //\n        // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n        // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n        // in one step.\n        //\n        // The Custom Elements v1 polyfill supports upgrade(), so the order when\n        // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n        // Connect.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const stack = [];\n        const parts = this.template.parts;\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        let partIndex = 0;\n        let nodeIndex = 0;\n        let part;\n        let node = walker.nextNode();\n        // Loop through all the nodes and parts of a template\n        while (partIndex < parts.length) {\n            part = parts[partIndex];\n            if (!isTemplatePartActive(part)) {\n                this.__parts.push(undefined);\n                partIndex++;\n                continue;\n            }\n            // Progress the tree walker until we find our next part's node.\n            // Note that multiple parts may share the same node (attribute parts\n            // on a single element), so this loop may not run at all.\n            while (nodeIndex < part.index) {\n                nodeIndex++;\n                if (node.nodeName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n                if ((node = walker.nextNode()) === null) {\n                    // We've exhausted the content inside a nested template element.\n                    // Because we still have parts (the outer for-loop), we know:\n                    // - There is a template in the stack\n                    // - The walker will find a nextNode outside the template\n                    walker.currentNode = stack.pop();\n                    node = walker.nextNode();\n                }\n            }\n            // We've arrived at our part's node.\n            if (part.type === 'node') {\n                const part = this.processor.handleTextExpression(this.options);\n                part.insertAfterNode(node.previousSibling);\n                this.__parts.push(part);\n            }\n            else {\n                this.__parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));\n            }\n            partIndex++;\n        }\n        if (isCEPolyfill) {\n            document.adoptNode(fragment);\n            customElements.upgrade(fragment);\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=template-instance.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { reparentNodes } from './dom.js';\nimport { boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker } from './template.js';\n/**\n * Our TrustedTypePolicy for HTML which is declared using the html template\n * tag function.\n *\n * That HTML is a developer-authored constant, and is parsed with innerHTML\n * before any untrusted expressions have been mixed in. Therefor it is\n * considered safe by construction.\n */\nconst policy = window.trustedTypes &&\n    trustedTypes.createPolicy('lit-html', { createHTML: (s) => s });\nconst commentMarker = ` ${marker} `;\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a `<template>` element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = '';\n        let isCommentBinding = false;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            // For each binding we want to determine the kind of marker to insert\n            // into the template source before it's parsed by the browser's HTML\n            // parser. The marker type is based on whether the expression is in an\n            // attribute, text, or comment position.\n            //   * For node-position bindings we insert a comment with the marker\n            //     sentinel as its text content, like <!--{{lit-guid}}-->.\n            //   * For attribute bindings we insert just the marker sentinel for the\n            //     first binding, so that we support unquoted attribute bindings.\n            //     Subsequent bindings can use a comment marker because multi-binding\n            //     attributes must be quoted.\n            //   * For comment bindings we insert just the marker sentinel so we don't\n            //     close the comment.\n            //\n            // The following code scans the template source, but is *not* an HTML\n            // parser. We don't need to track the tree structure of the HTML, only\n            // whether a binding is inside a comment, and if not, if it appears to be\n            // the first binding in an attribute.\n            const commentOpen = s.lastIndexOf('<!--');\n            // We're in comment position if we have a comment open with no following\n            // comment close. Because <-- can appear in an attribute value there can\n            // be false positives.\n            isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n                s.indexOf('-->', commentOpen + 1) === -1;\n            // Check to see if we have an attribute-like sequence preceding the\n            // expression. This can match \"name=value\" like structures in text,\n            // comments, and attribute values, so there can be false-positives.\n            const attributeMatch = lastAttributeNameRegex.exec(s);\n            if (attributeMatch === null) {\n                // We're only in this branch if we don't have a attribute-like\n                // preceding sequence. For comments, this guards against unusual\n                // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n                // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n                // below.\n                html += s + (isCommentBinding ? commentMarker : nodeMarker);\n            }\n            else {\n                // For attributes we use just a marker sentinel, and also append a\n                // $lit$ suffix to the name to opt-out of attribute-specific parsing\n                // that IE and Edge do for style and certain SVG attributes.\n                html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n                    attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n                    marker;\n            }\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        let value = this.getHTML();\n        if (policy !== undefined) {\n            // this is secure because `this.strings` is a TemplateStringsArray.\n            // TODO: validate this when\n            // https://github.com/tc39/proposal-array-is-template-object is\n            // implemented.\n            value = policy.createHTML(value);\n        }\n        template.innerHTML = value;\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n//# sourceMappingURL=template-result.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { isDirective } from './directive.js';\nimport { removeNodes } from './dom.js';\nimport { noChange, nothing } from './part.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { createMarker } from './template.js';\nexport const isPrimitive = (value) => {\n    return (value === null ||\n        !(typeof value === 'object' || typeof value === 'function'));\n};\nexport const isIterable = (value) => {\n    return Array.isArray(value) ||\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        !!(value && value[Symbol.iterator]);\n};\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attribute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nexport class AttributeCommitter {\n    constructor(element, name, strings) {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        const parts = this.parts;\n        // If we're assigning an attribute via syntax like:\n        //    attr=\"${foo}\"  or  attr=${foo}\n        // but not\n        //    attr=\"${foo} ${bar}\" or attr=\"${foo} baz\"\n        // then we don't want to coerce the attribute value into one long\n        // string. Instead we want to just return the value itself directly,\n        // so that sanitizeDOMValue can get the actual value rather than\n        // String(value)\n        // The exception is if v is an array, in which case we do want to smash\n        // it together into a string without calling String() on the array.\n        //\n        // This also allows trusted values (when using TrustedTypes) being\n        // assigned to DOM sinks without being stringified in the process.\n        if (l === 1 && strings[0] === '' && strings[1] === '') {\n            const v = parts[0].value;\n            if (typeof v === 'symbol') {\n                return String(v);\n            }\n            if (typeof v === 'string' || !isIterable(v)) {\n                return v;\n            }\n        }\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (isPrimitive(v) || !isIterable(v)) {\n                    text += typeof v === 'string' ? v : String(v);\n                }\n                else {\n                    for (const t of v) {\n                        text += typeof t === 'string' ? t : String(t);\n                    }\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element.setAttribute(this.name, this._getValue());\n        }\n    }\n}\n/**\n * A Part that controls all or part of an attribute value.\n */\nexport class AttributePart {\n    constructor(committer) {\n        this.value = undefined;\n        this.committer = committer;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it'll\n            // call setAttribute. If the value is a directive, it'll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            directive(this);\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nexport class NodePart {\n    constructor(options) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.options = options;\n    }\n    /**\n     * Appends this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendInto(container) {\n        this.startNode = container.appendChild(createMarker());\n        this.endNode = container.appendChild(createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n     * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n     * such as those that appear in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part.__insert(this.startNode = createMarker());\n        part.__insert(this.endNode = createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref.__insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        if (this.startNode.parentNode === null) {\n            return;\n        }\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        const value = this.__pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this.__commitText(value);\n            }\n        }\n        else if (value instanceof TemplateResult) {\n            this.__commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this.__commitNode(value);\n        }\n        else if (isIterable(value)) {\n            this.__commitIterable(value);\n        }\n        else if (value === nothing) {\n            this.value = nothing;\n            this.clear();\n        }\n        else {\n            // Fallback, will render the string representation\n            this.__commitText(value);\n        }\n    }\n    __insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    __commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this.__insert(value);\n        this.value = value;\n    }\n    __commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? '' : value;\n        // If `value` isn't already a string, we explicitly convert it here in case\n        // it can't be implicitly converted - i.e. it's a symbol.\n        const valueAsString = typeof value === 'string' ? value : String(value);\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === 3 /* Node.TEXT_NODE */) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if this.value is primitive?\n            node.data = valueAsString;\n        }\n        else {\n            this.__commitNode(document.createTextNode(valueAsString));\n        }\n        this.value = value;\n    }\n    __commitTemplateResult(value) {\n        const template = this.options.templateFactory(value);\n        if (this.value instanceof TemplateInstance &&\n            this.value.template === template) {\n            this.value.update(value.values);\n        }\n        else {\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use its syntax extension, etc. The template factory comes\n            // from the render function options so that it can control template\n            // caching and preprocessing.\n            const instance = new TemplateInstance(template, value.processor, this.options);\n            const fragment = instance._clone();\n            instance.update(value.values);\n            this.__commitNode(fragment);\n            this.value = instance;\n        }\n    }\n    __commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new NodePart(this.options);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n            throw new Error('Boolean attributes can only contain a single expression');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const value = !!this.__pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n            this.value = value;\n        }\n        this.__pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings) {\n        super(element, name, strings);\n        this.single =\n            (strings.length === 2 && strings[0] === '' && strings[1] === '');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.element[this.name] = this._getValue();\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n}\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the third\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\n// Wrap into an IIFE because MS Edge <= v41 does not support having try/catch\n// blocks right into the body of a module\n(() => {\n    try {\n        const options = {\n            get capture() {\n                eventOptionsSupported = true;\n                return false;\n            }\n        };\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        window.addEventListener('test', options, options);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        window.removeEventListener('test', options, options);\n    }\n    catch (_e) {\n        // event options not supported\n    }\n})();\nexport class EventPart {\n    constructor(element, eventName, eventContext) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n        this.eventContext = eventContext;\n        this.__boundHandleEvent = (e) => this.handleEvent(e);\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const newListener = this.__pendingValue;\n        const oldListener = this.value;\n        const shouldRemoveListener = newListener == null ||\n            oldListener != null &&\n                (newListener.capture !== oldListener.capture ||\n                    newListener.once !== oldListener.once ||\n                    newListener.passive !== oldListener.passive);\n        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);\n        if (shouldRemoveListener) {\n            this.element.removeEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        if (shouldAddListener) {\n            this.__options = getOptions(newListener);\n            this.element.addEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        this.value = newListener;\n        this.__pendingValue = noChange;\n    }\n    handleEvent(event) {\n        if (typeof this.value === 'function') {\n            this.value.call(this.eventContext || this.element, event);\n        }\n        else {\n            this.value.handleEvent(event);\n        }\n    }\n}\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o) => o &&\n    (eventOptionsSupported ?\n        { capture: o.capture, passive: o.passive, once: o.once } :\n        o.capture);\n//# sourceMappingURL=parts.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { marker, Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    // If the TemplateStringsArray is new, generate a key from the strings\n    // This key is shared between all templates with identical content\n    const key = result.strings.join(marker);\n    // Check if we already have a Template for this key\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        // If we have not seen this key before, create a new Template\n        template = new Template(result, result.getTemplateElement());\n        // Cache the Template for this key\n        templateCache.keyString.set(key, template);\n    }\n    // Cache all future queries for this TemplateStringsArray\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n}\nexport const templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template result or other value to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result Any value renderable by NodePart - typically a TemplateResult\n *     created by evaluating a template tag like `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render = (result, container, options) => {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n};\n//# sourceMappingURL=render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor {\n    /**\n     * Create parts for an attribute-position binding, given the event, attribute\n     * name, and string literals.\n     *\n     * @param element The element containing the binding\n     * @param name  The attribute name\n     * @param strings The string literals. There are always at least two strings,\n     *   event for fully-controlled bindings with a single expression.\n     */\n    handleAttributeExpressions(element, name, strings, options) {\n        const prefix = name[0];\n        if (prefix === '.') {\n            const committer = new PropertyCommitter(element, name.slice(1), strings);\n            return committer.parts;\n        }\n        if (prefix === '@') {\n            return [new EventPart(element, name.slice(1), options.eventContext)];\n        }\n        if (prefix === '?') {\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\n        }\n        const committer = new AttributeCommitter(element, name, strings);\n        return committer.parts;\n    }\n    /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n    handleTextExpression(options) {\n        return new NodePart(options);\n    }\n}\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n//# sourceMappingURL=default-template-processor.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @packageDocumentation\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { defaultTemplateProcessor } from './lib/default-template-processor.js';\nimport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { DefaultTemplateProcessor, defaultTemplateProcessor } from './lib/default-template-processor.js';\nexport { directive, isDirective } from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport { removeNodes, reparentNodes } from './lib/dom.js';\nexport { noChange, nothing } from './lib/part.js';\nexport { AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart } from './lib/parts.js';\nexport { parts, render } from './lib/render.js';\nexport { templateCaches, templateFactory } from './lib/template-factory.js';\nexport { TemplateInstance } from './lib/template-instance.js';\nexport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { createMarker, isTemplatePartActive, Template } from './lib/template.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\nif (typeof window !== 'undefined') {\n    (window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.3.0');\n}\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * Module to add shady DOM/shady CSS polyfill support to lit-html template\n * rendering. See the [[render]] method for details.\n *\n * @packageDocumentation\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { removeNodes } from './dom.js';\nimport { insertNodeIntoTemplate, removeNodesFromTemplate } from './modify-template.js';\nimport { parts, render as litRender } from './render.js';\nimport { templateCaches } from './template-factory.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { marker, Template } from './template.js';\nexport { html, svg, TemplateResult } from '../lit-html.js';\n// Get a key to lookup in `templateCaches`.\nconst getTemplateCacheKey = (type, scopeName) => `${type}--${scopeName}`;\nlet compatibleShadyCSSVersion = true;\nif (typeof window.ShadyCSS === 'undefined') {\n    compatibleShadyCSSVersion = false;\n}\nelse if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {\n    console.warn(`Incompatible ShadyCSS version detected. ` +\n        `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and ` +\n        `@webcomponents/shadycss@1.3.1.`);\n    compatibleShadyCSSVersion = false;\n}\n/**\n * Template factory which scopes template DOM using ShadyCSS.\n * @param scopeName {string}\n */\nexport const shadyTemplateFactory = (scopeName) => (result) => {\n    const cacheKey = getTemplateCacheKey(result.type, scopeName);\n    let templateCache = templateCaches.get(cacheKey);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(cacheKey, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    const key = result.strings.join(marker);\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        const element = result.getTemplateElement();\n        if (compatibleShadyCSSVersion) {\n            window.ShadyCSS.prepareTemplateDom(element, scopeName);\n        }\n        template = new Template(result, element);\n        templateCache.keyString.set(key, template);\n    }\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n};\nconst TEMPLATE_TYPES = ['html', 'svg'];\n/**\n * Removes all style elements from Templates for the given scopeName.\n */\nconst removeStylesFromLitTemplates = (scopeName) => {\n    TEMPLATE_TYPES.forEach((type) => {\n        const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));\n        if (templates !== undefined) {\n            templates.keyString.forEach((template) => {\n                const { element: { content } } = template;\n                // IE 11 doesn't support the iterable param Set constructor\n                const styles = new Set();\n                Array.from(content.querySelectorAll('style')).forEach((s) => {\n                    styles.add(s);\n                });\n                removeNodesFromTemplate(template, styles);\n            });\n        }\n    });\n};\nconst shadyRenderSet = new Set();\n/**\n * For the given scope name, ensures that ShadyCSS style scoping is performed.\n * This is done just once per scope name so the fragment and template cannot\n * be modified.\n * (1) extracts styles from the rendered fragment and hands them to ShadyCSS\n * to be scoped and appended to the document\n * (2) removes style elements from all lit-html Templates for this scope name.\n *\n * Note, <style> elements can only be placed into templates for the\n * initial rendering of the scope. If <style> elements are included in templates\n * dynamically rendered to the scope (after the first scope render), they will\n * not be scoped and the <style> will be left in the template and rendered\n * output.\n */\nconst prepareTemplateStyles = (scopeName, renderedDOM, template) => {\n    shadyRenderSet.add(scopeName);\n    // If `renderedDOM` is stamped from a Template, then we need to edit that\n    // Template's underlying template element. Otherwise, we create one here\n    // to give to ShadyCSS, which still requires one while scoping.\n    const templateElement = !!template ? template.element : document.createElement('template');\n    // Move styles out of rendered DOM and store.\n    const styles = renderedDOM.querySelectorAll('style');\n    const { length } = styles;\n    // If there are no styles, skip unnecessary work\n    if (length === 0) {\n        // Ensure prepareTemplateStyles is called to support adding\n        // styles via `prepareAdoptedCssText` since that requires that\n        // `prepareTemplateStyles` is called.\n        //\n        // ShadyCSS will only update styles containing @apply in the template\n        // given to `prepareTemplateStyles`. If no lit Template was given,\n        // ShadyCSS will not be able to update uses of @apply in any relevant\n        // template. However, this is not a problem because we only create the\n        // template for the purpose of supporting `prepareAdoptedCssText`,\n        // which doesn't support @apply at all.\n        window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);\n        return;\n    }\n    const condensedStyle = document.createElement('style');\n    // Collect styles into a single style. This helps us make sure ShadyCSS\n    // manipulations will not prevent us from being able to fix up template\n    // part indices.\n    // NOTE: collecting styles is inefficient for browsers but ShadyCSS\n    // currently does this anyway. When it does not, this should be changed.\n    for (let i = 0; i < length; i++) {\n        const style = styles[i];\n        style.parentNode.removeChild(style);\n        condensedStyle.textContent += style.textContent;\n    }\n    // Remove styles from nested templates in this scope.\n    removeStylesFromLitTemplates(scopeName);\n    // And then put the condensed style into the \"root\" template passed in as\n    // `template`.\n    const content = templateElement.content;\n    if (!!template) {\n        insertNodeIntoTemplate(template, condensedStyle, content.firstChild);\n    }\n    else {\n        content.insertBefore(condensedStyle, content.firstChild);\n    }\n    // Note, it's important that ShadyCSS gets the template that `lit-html`\n    // will actually render so that it can update the style inside when\n    // needed (e.g. @apply native Shadow DOM case).\n    window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);\n    const style = content.querySelector('style');\n    if (window.ShadyCSS.nativeShadow && style !== null) {\n        // When in native Shadow DOM, ensure the style created by ShadyCSS is\n        // included in initially rendered output (`renderedDOM`).\n        renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);\n    }\n    else if (!!template) {\n        // When no style is left in the template, parts will be broken as a\n        // result. To fix this, we put back the style node ShadyCSS removed\n        // and then tell lit to remove that node from the template.\n        // There can be no style in the template in 2 cases (1) when Shady DOM\n        // is in use, ShadyCSS removes all styles, (2) when native Shadow DOM\n        // is in use ShadyCSS removes the style if it contains no content.\n        // NOTE, ShadyCSS creates its own style so we can safely add/remove\n        // `condensedStyle` here.\n        content.insertBefore(condensedStyle, content.firstChild);\n        const removes = new Set();\n        removes.add(condensedStyle);\n        removeNodesFromTemplate(template, removes);\n    }\n};\n/**\n * Extension to the standard `render` method which supports rendering\n * to ShadowRoots when the ShadyDOM (https://github.com/webcomponents/shadydom)\n * and ShadyCSS (https://github.com/webcomponents/shadycss) polyfills are used\n * or when the webcomponentsjs\n * (https://github.com/webcomponents/webcomponentsjs) polyfill is used.\n *\n * Adds a `scopeName` option which is used to scope element DOM and stylesheets\n * when native ShadowDOM is unavailable. The `scopeName` will be added to\n * the class attribute of all rendered DOM. In addition, any style elements will\n * be automatically re-written with this `scopeName` selector and moved out\n * of the rendered DOM and into the document `<head>`.\n *\n * It is common to use this render method in conjunction with a custom element\n * which renders a shadowRoot. When this is done, typically the element's\n * `localName` should be used as the `scopeName`.\n *\n * In addition to DOM scoping, ShadyCSS also supports a basic shim for css\n * custom properties (needed only on older browsers like IE11) and a shim for\n * a deprecated feature called `@apply` that supports applying a set of css\n * custom properties to a given location.\n *\n * Usage considerations:\n *\n * * Part values in `<style>` elements are only applied the first time a given\n * `scopeName` renders. Subsequent changes to parts in style elements will have\n * no effect. Because of this, parts in style elements should only be used for\n * values that will never change, for example parts that set scope-wide theme\n * values or parts which render shared style elements.\n *\n * * Note, due to a limitation of the ShadyDOM polyfill, rendering in a\n * custom element's `constructor` is not supported. Instead rendering should\n * either done asynchronously, for example at microtask timing (for example\n * `Promise.resolve()`), or be deferred until the first time the element's\n * `connectedCallback` runs.\n *\n * Usage considerations when using shimmed custom properties or `@apply`:\n *\n * * Whenever any dynamic changes are made which affect\n * css custom properties, `ShadyCSS.styleElement(element)` must be called\n * to update the element. There are two cases when this is needed:\n * (1) the element is connected to a new parent, (2) a class is added to the\n * element that causes it to match different custom properties.\n * To address the first case when rendering a custom element, `styleElement`\n * should be called in the element's `connectedCallback`.\n *\n * * Shimmed custom properties may only be defined either for an entire\n * shadowRoot (for example, in a `:host` rule) or via a rule that directly\n * matches an element with a shadowRoot. In other words, instead of flowing from\n * parent to child as do native css custom properties, shimmed custom properties\n * flow only from shadowRoots to nested shadowRoots.\n *\n * * When using `@apply` mixing css shorthand property names with\n * non-shorthand names (for example `border` and `border-width`) is not\n * supported.\n */\nexport const render = (result, container, options) => {\n    if (!options || typeof options !== 'object' || !options.scopeName) {\n        throw new Error('The `scopeName` option is required.');\n    }\n    const scopeName = options.scopeName;\n    const hasRendered = parts.has(container);\n    const needsScoping = compatibleShadyCSSVersion &&\n        container.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */ &&\n        !!container.host;\n    // Handle first render to a scope specially...\n    const firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName);\n    // On first scope render, render into a fragment; this cannot be a single\n    // fragment that is reused since nested renders can occur synchronously.\n    const renderContainer = firstScopeRender ? document.createDocumentFragment() : container;\n    litRender(result, renderContainer, Object.assign({ templateFactory: shadyTemplateFactory(scopeName) }, options));\n    // When performing first scope render,\n    // (1) We've rendered into a fragment so that there's a chance to\n    // `prepareTemplateStyles` before sub-elements hit the DOM\n    // (which might cause them to render based on a common pattern of\n    // rendering in a custom element's `connectedCallback`);\n    // (2) Scope the template with ShadyCSS one time only for this scope.\n    // (3) Render the fragment into the container and make sure the\n    // container knows its `part` is the one we just rendered. This ensures\n    // DOM will be re-used on subsequent renders.\n    if (firstScopeRender) {\n        const part = parts.get(renderContainer);\n        parts.delete(renderContainer);\n        // ShadyCSS might have style sheets (e.g. from `prepareAdoptedCssText`)\n        // that should apply to `renderContainer` even if the rendered value is\n        // not a TemplateInstance. However, it will only insert scoped styles\n        // into the document if `prepareTemplateStyles` has already been called\n        // for the given scope name.\n        const template = part.value instanceof TemplateInstance ?\n            part.value.template :\n            undefined;\n        prepareTemplateStyles(scopeName, renderContainer, template);\n        removeNodes(container, container.firstChild);\n        container.appendChild(renderContainer);\n        parts.set(container, part);\n    }\n    // After elements have hit the DOM, update styling if this is the\n    // initial render to this container.\n    // This is needed whenever dynamic changes are made so it would be\n    // safest to do every render; however, this would regress performance\n    // so we leave it up to the user to call `ShadyCSS.styleElement`\n    // for dynamic changes.\n    if (!hasRendered && needsScoping) {\n        window.ShadyCSS.styleElement(container.host);\n    }\n};\n//# sourceMappingURL=shady-render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nvar _a;\n/**\n * Use this module if you want to create your own base class extending\n * [[UpdatingElement]].\n * @packageDocumentation\n */\n/*\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\nwindow.JSCompiler_renameProperty =\n    (prop, _obj) => prop;\nexport const defaultConverter = {\n    toAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value ? '' : null;\n            case Object:\n            case Array:\n                // if the value is `null` or `undefined` pass this through\n                // to allow removing/no change behavior.\n                return value == null ? value : JSON.stringify(value);\n        }\n        return value;\n    },\n    fromAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value !== null;\n            case Number:\n                return value === null ? null : Number(value);\n            case Object:\n            case Array:\n                return JSON.parse(value);\n        }\n        return value;\n    }\n};\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual = (value, old) => {\n    // This ensures (old==NaN, value==NaN) always returns false\n    return old !== value && (old === old || value === value);\n};\nconst defaultPropertyDeclaration = {\n    attribute: true,\n    type: String,\n    converter: defaultConverter,\n    reflect: false,\n    hasChanged: notEqual\n};\nconst STATE_HAS_UPDATED = 1;\nconst STATE_UPDATE_REQUESTED = 1 << 2;\nconst STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;\nconst STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;\n/**\n * The Closure JS Compiler doesn't currently have good support for static\n * property semantics where \"this\" is dynamic (e.g.\n * https://github.com/google/closure-compiler/issues/3177 and others) so we use\n * this hack to bypass any rewriting by the compiler.\n */\nconst finalized = 'finalized';\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n * @noInheritDoc\n */\nexport class UpdatingElement extends HTMLElement {\n    constructor() {\n        super();\n        this.initialize();\n    }\n    /**\n     * Returns a list of attributes corresponding to the registered properties.\n     * @nocollapse\n     */\n    static get observedAttributes() {\n        // note: piggy backing on this to ensure we're finalized.\n        this.finalize();\n        const attributes = [];\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this._classProperties.forEach((v, p) => {\n            const attr = this._attributeNameForProperty(p, v);\n            if (attr !== undefined) {\n                this._attributeToPropertyMap.set(attr, p);\n                attributes.push(attr);\n            }\n        });\n        return attributes;\n    }\n    /**\n     * Ensures the private `_classProperties` property metadata is created.\n     * In addition to `finalize` this is also called in `createProperty` to\n     * ensure the `@property` decorator can add property metadata.\n     */\n    /** @nocollapse */\n    static _ensureClassProperties() {\n        // ensure private storage for property declarations.\n        if (!this.hasOwnProperty(JSCompiler_renameProperty('_classProperties', this))) {\n            this._classProperties = new Map();\n            // NOTE: Workaround IE11 not supporting Map constructor argument.\n            const superProperties = Object.getPrototypeOf(this)._classProperties;\n            if (superProperties !== undefined) {\n                superProperties.forEach((v, k) => this._classProperties.set(k, v));\n            }\n        }\n    }\n    /**\n     * Creates a property accessor on the element prototype if one does not exist\n     * and stores a PropertyDeclaration for the property with the given options.\n     * The property setter calls the property's `hasChanged` property option\n     * or uses a strict identity check to determine whether or not to request\n     * an update.\n     *\n     * This method may be overridden to customize properties; however,\n     * when doing so, it's important to call `super.createProperty` to ensure\n     * the property is setup correctly. This method calls\n     * `getPropertyDescriptor` internally to get a descriptor to install.\n     * To customize what properties do when they are get or set, override\n     * `getPropertyDescriptor`. To customize the options for a property,\n     * implement `createProperty` like this:\n     *\n     * static createProperty(name, options) {\n     *   options = Object.assign(options, {myOption: true});\n     *   super.createProperty(name, options);\n     * }\n     *\n     * @nocollapse\n     */\n    static createProperty(name, options = defaultPropertyDeclaration) {\n        // Note, since this can be called by the `@property` decorator which\n        // is called before `finalize`, we ensure storage exists for property\n        // metadata.\n        this._ensureClassProperties();\n        this._classProperties.set(name, options);\n        // Do not generate an accessor if the prototype already has one, since\n        // it would be lost otherwise and that would never be the user's intention;\n        // Instead, we expect users to call `requestUpdate` themselves from\n        // user-defined accessors. Note that if the super has an accessor we will\n        // still overwrite it\n        if (options.noAccessor || this.prototype.hasOwnProperty(name)) {\n            return;\n        }\n        const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n        const descriptor = this.getPropertyDescriptor(name, key, options);\n        if (descriptor !== undefined) {\n            Object.defineProperty(this.prototype, name, descriptor);\n        }\n    }\n    /**\n     * Returns a property descriptor to be defined on the given named property.\n     * If no descriptor is returned, the property will not become an accessor.\n     * For example,\n     *\n     *   class MyElement extends LitElement {\n     *     static getPropertyDescriptor(name, key, options) {\n     *       const defaultDescriptor =\n     *           super.getPropertyDescriptor(name, key, options);\n     *       const setter = defaultDescriptor.set;\n     *       return {\n     *         get: defaultDescriptor.get,\n     *         set(value) {\n     *           setter.call(this, value);\n     *           // custom action.\n     *         },\n     *         configurable: true,\n     *         enumerable: true\n     *       }\n     *     }\n     *   }\n     *\n     * @nocollapse\n     */\n    static getPropertyDescriptor(name, key, options) {\n        return {\n            // tslint:disable-next-line:no-any no symbol in index\n            get() {\n                return this[key];\n            },\n            set(value) {\n                const oldValue = this[name];\n                this[key] = value;\n                this\n                    .requestUpdateInternal(name, oldValue, options);\n            },\n            configurable: true,\n            enumerable: true\n        };\n    }\n    /**\n     * Returns the property options associated with the given property.\n     * These options are defined with a PropertyDeclaration via the `properties`\n     * object or the `@property` decorator and are registered in\n     * `createProperty(...)`.\n     *\n     * Note, this method should be considered \"final\" and not overridden. To\n     * customize the options for a given property, override `createProperty`.\n     *\n     * @nocollapse\n     * @final\n     */\n    static getPropertyOptions(name) {\n        return this._classProperties && this._classProperties.get(name) ||\n            defaultPropertyDeclaration;\n    }\n    /**\n     * Creates property accessors for registered properties and ensures\n     * any superclasses are also finalized.\n     * @nocollapse\n     */\n    static finalize() {\n        // finalize any superclasses\n        const superCtor = Object.getPrototypeOf(this);\n        if (!superCtor.hasOwnProperty(finalized)) {\n            superCtor.finalize();\n        }\n        this[finalized] = true;\n        this._ensureClassProperties();\n        // initialize Map populated in observedAttributes\n        this._attributeToPropertyMap = new Map();\n        // make any properties\n        // Note, only process \"own\" properties since this element will inherit\n        // any properties defined on the superClass, and finalization ensures\n        // the entire prototype chain is finalized.\n        if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n            const props = this.properties;\n            // support symbols in properties (IE11 does not support this)\n            const propKeys = [\n                ...Object.getOwnPropertyNames(props),\n                ...(typeof Object.getOwnPropertySymbols === 'function') ?\n                    Object.getOwnPropertySymbols(props) :\n                    []\n            ];\n            // This for/of is ok because propKeys is an array\n            for (const p of propKeys) {\n                // note, use of `any` is due to TypeSript lack of support for symbol in\n                // index types\n                // tslint:disable-next-line:no-any no symbol in index\n                this.createProperty(p, props[p]);\n            }\n        }\n    }\n    /**\n     * Returns the property name for the given attribute `name`.\n     * @nocollapse\n     */\n    static _attributeNameForProperty(name, options) {\n        const attribute = options.attribute;\n        return attribute === false ?\n            undefined :\n            (typeof attribute === 'string' ?\n                attribute :\n                (typeof name === 'string' ? name.toLowerCase() : undefined));\n    }\n    /**\n     * Returns true if a property should request an update.\n     * Called when a property value is set and uses the `hasChanged`\n     * option for the property if present or a strict identity check.\n     * @nocollapse\n     */\n    static _valueHasChanged(value, old, hasChanged = notEqual) {\n        return hasChanged(value, old);\n    }\n    /**\n     * Returns the property value for the given attribute value.\n     * Called via the `attributeChangedCallback` and uses the property's\n     * `converter` or `converter.fromAttribute` property option.\n     * @nocollapse\n     */\n    static _propertyValueFromAttribute(value, options) {\n        const type = options.type;\n        const converter = options.converter || defaultConverter;\n        const fromAttribute = (typeof converter === 'function' ? converter : converter.fromAttribute);\n        return fromAttribute ? fromAttribute(value, type) : value;\n    }\n    /**\n     * Returns the attribute value for the given property value. If this\n     * returns undefined, the property will *not* be reflected to an attribute.\n     * If this returns null, the attribute will be removed, otherwise the\n     * attribute will be set to the value.\n     * This uses the property's `reflect` and `type.toAttribute` property options.\n     * @nocollapse\n     */\n    static _propertyValueToAttribute(value, options) {\n        if (options.reflect === undefined) {\n            return;\n        }\n        const type = options.type;\n        const converter = options.converter;\n        const toAttribute = converter && converter.toAttribute ||\n            defaultConverter.toAttribute;\n        return toAttribute(value, type);\n    }\n    /**\n     * Performs element initialization. By default captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        this._updateState = 0;\n        this._updatePromise =\n            new Promise((res) => this._enableUpdatingResolver = res);\n        this._changedProperties = new Map();\n        this._saveInstanceProperties();\n        // ensures first update will be caught by an early access of\n        // `updateComplete`\n        this.requestUpdateInternal();\n    }\n    /**\n     * Fixes any properties set on the instance before upgrade time.\n     * Otherwise these would shadow the accessor and break these properties.\n     * The properties are stored in a Map which is played back after the\n     * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n     * (<=41), properties created for native platform properties like (`id` or\n     * `name`) may not have default values set in the element constructor. On\n     * these browsers native properties appear on instances and therefore their\n     * default value will overwrite any element default (e.g. if the element sets\n     * this.id = 'id' in the constructor, the 'id' will become '' since this is\n     * the native platform default).\n     */\n    _saveInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this.constructor\n            ._classProperties.forEach((_v, p) => {\n            if (this.hasOwnProperty(p)) {\n                const value = this[p];\n                delete this[p];\n                if (!this._instanceProperties) {\n                    this._instanceProperties = new Map();\n                }\n                this._instanceProperties.set(p, value);\n            }\n        });\n    }\n    /**\n     * Applies previously saved instance properties.\n     */\n    _applyInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        // tslint:disable-next-line:no-any\n        this._instanceProperties.forEach((v, p) => this[p] = v);\n        this._instanceProperties = undefined;\n    }\n    connectedCallback() {\n        // Ensure first connection completes an update. Updates cannot complete\n        // before connection.\n        this.enableUpdating();\n    }\n    enableUpdating() {\n        if (this._enableUpdatingResolver !== undefined) {\n            this._enableUpdatingResolver();\n            this._enableUpdatingResolver = undefined;\n        }\n    }\n    /**\n     * Allows for `super.disconnectedCallback()` in extensions while\n     * reserving the possibility of making non-breaking feature additions\n     * when disconnecting at some point in the future.\n     */\n    disconnectedCallback() {\n    }\n    /**\n     * Synchronizes property values when attributes change.\n     */\n    attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n            this._attributeToProperty(name, value);\n        }\n    }\n    _propertyToAttribute(name, value, options = defaultPropertyDeclaration) {\n        const ctor = this.constructor;\n        const attr = ctor._attributeNameForProperty(name, options);\n        if (attr !== undefined) {\n            const attrValue = ctor._propertyValueToAttribute(value, options);\n            // an undefined value does not change the attribute.\n            if (attrValue === undefined) {\n                return;\n            }\n            // Track if the property is being reflected to avoid\n            // setting the property again via `attributeChangedCallback`. Note:\n            // 1. this takes advantage of the fact that the callback is synchronous.\n            // 2. will behave incorrectly if multiple attributes are in the reaction\n            // stack at time of calling. However, since we process attributes\n            // in `update` this should not be possible (or an extreme corner case\n            // that we'd like to discover).\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;\n            if (attrValue == null) {\n                this.removeAttribute(attr);\n            }\n            else {\n                this.setAttribute(attr, attrValue);\n            }\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;\n        }\n    }\n    _attributeToProperty(name, value) {\n        // Use tracking info to avoid deserializing attribute value if it was\n        // just set from a property setter.\n        if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {\n            return;\n        }\n        const ctor = this.constructor;\n        // Note, hint this as an `AttributeMap` so closure clearly understands\n        // the type; it has issues with tracking types through statics\n        // tslint:disable-next-line:no-unnecessary-type-assertion\n        const propName = ctor._attributeToPropertyMap.get(name);\n        if (propName !== undefined) {\n            const options = ctor.getPropertyOptions(propName);\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;\n            this[propName] =\n                // tslint:disable-next-line:no-any\n                ctor._propertyValueFromAttribute(value, options);\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;\n        }\n    }\n    /**\n     * This protected version of `requestUpdate` does not access or return the\n     * `updateComplete` promise. This promise can be overridden and is therefore\n     * not free to access.\n     */\n    requestUpdateInternal(name, oldValue, options) {\n        let shouldRequestUpdate = true;\n        // If we have a property key, perform property update steps.\n        if (name !== undefined) {\n            const ctor = this.constructor;\n            options = options || ctor.getPropertyOptions(name);\n            if (ctor._valueHasChanged(this[name], oldValue, options.hasChanged)) {\n                if (!this._changedProperties.has(name)) {\n                    this._changedProperties.set(name, oldValue);\n                }\n                // Add to reflecting properties set.\n                // Note, it's important that every change has a chance to add the\n                // property to `_reflectingProperties`. This ensures setting\n                // attribute + property reflects correctly.\n                if (options.reflect === true &&\n                    !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {\n                    if (this._reflectingProperties === undefined) {\n                        this._reflectingProperties = new Map();\n                    }\n                    this._reflectingProperties.set(name, options);\n                }\n            }\n            else {\n                // Abort the request if the property should not be considered changed.\n                shouldRequestUpdate = false;\n            }\n        }\n        if (!this._hasRequestedUpdate && shouldRequestUpdate) {\n            this._updatePromise = this._enqueueUpdate();\n        }\n    }\n    /**\n     * Requests an update which is processed asynchronously. This should\n     * be called when an element should update based on some state not triggered\n     * by setting a property. In this case, pass no arguments. It should also be\n     * called when manually implementing a property setter. In this case, pass the\n     * property `name` and `oldValue` to ensure that any configured property\n     * options are honored. Returns the `updateComplete` Promise which is resolved\n     * when the update completes.\n     *\n     * @param name {PropertyKey} (optional) name of requesting property\n     * @param oldValue {any} (optional) old value of requesting property\n     * @returns {Promise} A Promise that is resolved when the update completes.\n     */\n    requestUpdate(name, oldValue) {\n        this.requestUpdateInternal(name, oldValue);\n        return this.updateComplete;\n    }\n    /**\n     * Sets up the element to asynchronously update.\n     */\n    async _enqueueUpdate() {\n        this._updateState = this._updateState | STATE_UPDATE_REQUESTED;\n        try {\n            // Ensure any previous update has resolved before updating.\n            // This `await` also ensures that property changes are batched.\n            await this._updatePromise;\n        }\n        catch (e) {\n            // Ignore any previous errors. We only care that the previous cycle is\n            // done. Any error should have been handled in the previous update.\n        }\n        const result = this.performUpdate();\n        // If `performUpdate` returns a Promise, we await it. This is done to\n        // enable coordinating updates with a scheduler. Note, the result is\n        // checked to avoid delaying an additional microtask unless we need to.\n        if (result != null) {\n            await result;\n        }\n        return !this._hasRequestedUpdate;\n    }\n    get _hasRequestedUpdate() {\n        return (this._updateState & STATE_UPDATE_REQUESTED);\n    }\n    get hasUpdated() {\n        return (this._updateState & STATE_HAS_UPDATED);\n    }\n    /**\n     * Performs an element update. Note, if an exception is thrown during the\n     * update, `firstUpdated` and `updated` will not be called.\n     *\n     * You can override this method to change the timing of updates. If this\n     * method is overridden, `super.performUpdate()` must be called.\n     *\n     * For instance, to schedule updates to occur just before the next frame:\n     *\n     * ```\n     * protected async performUpdate(): Promise<unknown> {\n     *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n     *   super.performUpdate();\n     * }\n     * ```\n     */\n    performUpdate() {\n        // Abort any update if one is not pending when this is called.\n        // This can happen if `performUpdate` is called early to \"flush\"\n        // the update.\n        if (!this._hasRequestedUpdate) {\n            return;\n        }\n        // Mixin instance properties once, if they exist.\n        if (this._instanceProperties) {\n            this._applyInstanceProperties();\n        }\n        let shouldUpdate = false;\n        const changedProperties = this._changedProperties;\n        try {\n            shouldUpdate = this.shouldUpdate(changedProperties);\n            if (shouldUpdate) {\n                this.update(changedProperties);\n            }\n            else {\n                this._markUpdated();\n            }\n        }\n        catch (e) {\n            // Prevent `firstUpdated` and `updated` from running when there's an\n            // update exception.\n            shouldUpdate = false;\n            // Ensure element can accept additional updates after an exception.\n            this._markUpdated();\n            throw e;\n        }\n        if (shouldUpdate) {\n            if (!(this._updateState & STATE_HAS_UPDATED)) {\n                this._updateState = this._updateState | STATE_HAS_UPDATED;\n                this.firstUpdated(changedProperties);\n            }\n            this.updated(changedProperties);\n        }\n    }\n    _markUpdated() {\n        this._changedProperties = new Map();\n        this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;\n    }\n    /**\n     * Returns a Promise that resolves when the element has completed updating.\n     * The Promise value is a boolean that is `true` if the element completed the\n     * update without triggering another update. The Promise result is `false` if\n     * a property was set inside `updated()`. If the Promise is rejected, an\n     * exception was thrown during the update.\n     *\n     * To await additional asynchronous work, override the `_getUpdateComplete`\n     * method. For example, it is sometimes useful to await a rendered element\n     * before fulfilling this Promise. To do this, first await\n     * `super._getUpdateComplete()`, then any subsequent state.\n     *\n     * @returns {Promise} The Promise returns a boolean that indicates if the\n     * update resolved without triggering another update.\n     */\n    get updateComplete() {\n        return this._getUpdateComplete();\n    }\n    /**\n     * Override point for the `updateComplete` promise.\n     *\n     * It is not safe to override the `updateComplete` getter directly due to a\n     * limitation in TypeScript which means it is not possible to call a\n     * superclass getter (e.g. `super.updateComplete.then(...)`) when the target\n     * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).\n     * This method should be overridden instead. For example:\n     *\n     *   class MyElement extends LitElement {\n     *     async _getUpdateComplete() {\n     *       await super._getUpdateComplete();\n     *       await this._myChild.updateComplete;\n     *     }\n     *   }\n     */\n    _getUpdateComplete() {\n        return this._updatePromise;\n    }\n    /**\n     * Controls whether or not `update` should be called when the element requests\n     * an update. By default, this method always returns `true`, but this can be\n     * customized to control when to update.\n     *\n     * @param _changedProperties Map of changed properties with old values\n     */\n    shouldUpdate(_changedProperties) {\n        return true;\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes.\n     * It can be overridden to render and keep updated element DOM.\n     * Setting properties inside this method will *not* trigger\n     * another update.\n     *\n     * @param _changedProperties Map of changed properties with old values\n     */\n    update(_changedProperties) {\n        if (this._reflectingProperties !== undefined &&\n            this._reflectingProperties.size > 0) {\n            // Use forEach so this works even if for/of loops are compiled to for\n            // loops expecting arrays\n            this._reflectingProperties.forEach((v, k) => this._propertyToAttribute(k, this[k], v));\n            this._reflectingProperties = undefined;\n        }\n        this._markUpdated();\n    }\n    /**\n     * Invoked whenever the element is updated. Implement to perform\n     * post-updating tasks via DOM APIs, for example, focusing an element.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * @param _changedProperties Map of changed properties with old values\n     */\n    updated(_changedProperties) {\n    }\n    /**\n     * Invoked when the element is first updated. Implement to perform one time\n     * work on the element after update.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * @param _changedProperties Map of changed properties with old values\n     */\n    firstUpdated(_changedProperties) {\n    }\n}\n_a = finalized;\n/**\n * Marks class as having finished creating properties.\n */\nUpdatingElement[_a] = true;\n//# sourceMappingURL=updating-element.js.map","/**\n@license\nCopyright (c) 2019 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\n/**\n * Whether the current browser supports `adoptedStyleSheets`.\n */\nexport const supportsAdoptingStyleSheets = (window.ShadowRoot) &&\n    (window.ShadyCSS === undefined || window.ShadyCSS.nativeShadow) &&\n    ('adoptedStyleSheets' in Document.prototype) &&\n    ('replace' in CSSStyleSheet.prototype);\nconst constructionToken = Symbol();\nexport class CSSResult {\n    constructor(cssText, safeToken) {\n        if (safeToken !== constructionToken) {\n            throw new Error('CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');\n        }\n        this.cssText = cssText;\n    }\n    // Note, this is a getter so that it's lazy. In practice, this means\n    // stylesheets are not created until the first element instance is made.\n    get styleSheet() {\n        if (this._styleSheet === undefined) {\n            // Note, if `supportsAdoptingStyleSheets` is true then we assume\n            // CSSStyleSheet is constructable.\n            if (supportsAdoptingStyleSheets) {\n                this._styleSheet = new CSSStyleSheet();\n                this._styleSheet.replaceSync(this.cssText);\n            }\n            else {\n                this._styleSheet = null;\n            }\n        }\n        return this._styleSheet;\n    }\n    toString() {\n        return this.cssText;\n    }\n}\n/**\n * Wrap a value for interpolation in a [[`css`]] tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value) => {\n    return new CSSResult(String(value), constructionToken);\n};\nconst textFromCSSResult = (value) => {\n    if (value instanceof CSSResult) {\n        return value.cssText;\n    }\n    else if (typeof value === 'number') {\n        return value;\n    }\n    else {\n        throw new Error(`Value passed to 'css' function must be a 'css' function result: ${value}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`);\n    }\n};\n/**\n * Template tag which which can be used with LitElement's [[LitElement.styles |\n * `styles`]] property to set element styles. For security reasons, only literal\n * string values may be used. To incorporate non-literal values [[`unsafeCSS`]]\n * may be used inside a template string part.\n */\nexport const css = (strings, ...values) => {\n    const cssText = values.reduce((acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1], strings[0]);\n    return new CSSResult(cssText, constructionToken);\n};\n//# sourceMappingURL=css-tag.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * The main LitElement module, which defines the [[`LitElement`]] base class and\n * related APIs.\n *\n *  LitElement components can define a template and a set of observed\n * properties. Changing an observed property triggers a re-render of the\n * element.\n *\n *  Import [[`LitElement`]] and [[`html`]] from this module to create a\n * component:\n *\n *  ```js\n * import {LitElement, html} from 'lit-element';\n *\n * class MyElement extends LitElement {\n *\n *   // Declare observed properties\n *   static get properties() {\n *     return {\n *       adjective: {}\n *     }\n *   }\n *\n *   constructor() {\n *     this.adjective = 'awesome';\n *   }\n *\n *   // Define the element's template\n *   render() {\n *     return html`<p>your ${adjective} template here</p>`;\n *   }\n * }\n *\n * customElements.define('my-element', MyElement);\n * ```\n *\n * `LitElement` extends [[`UpdatingElement`]] and adds lit-html templating.\n * The `UpdatingElement` class is provided for users that want to build\n * their own custom element base classes that don't use lit-html.\n *\n * @packageDocumentation\n */\nimport { render } from 'lit-html/lib/shady-render.js';\nimport { UpdatingElement } from './lib/updating-element.js';\nexport * from './lib/updating-element.js';\nexport * from './lib/decorators.js';\nexport { html, svg, TemplateResult, SVGTemplateResult } from 'lit-html/lit-html.js';\nimport { supportsAdoptingStyleSheets, unsafeCSS } from './lib/css-tag.js';\nexport * from './lib/css-tag.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litElementVersions'] || (window['litElementVersions'] = []))\n    .push('2.4.0');\n/**\n * Sentinal value used to avoid calling lit-html's render function when\n * subclasses do not implement `render`\n */\nconst renderNotImplemented = {};\n/**\n * Base element class that manages element properties and attributes, and\n * renders a lit-html template.\n *\n * To define a component, subclass `LitElement` and implement a\n * `render` method to provide the component's template. Define properties\n * using the [[`properties`]] property or the [[`property`]] decorator.\n */\nexport class LitElement extends UpdatingElement {\n    /**\n     * Return the array of styles to apply to the element.\n     * Override this method to integrate into a style management system.\n     *\n     * @nocollapse\n     */\n    static getStyles() {\n        return this.styles;\n    }\n    /** @nocollapse */\n    static _getUniqueStyles() {\n        // Only gather styles once per class\n        if (this.hasOwnProperty(JSCompiler_renameProperty('_styles', this))) {\n            return;\n        }\n        // Take care not to call `this.getStyles()` multiple times since this\n        // generates new CSSResults each time.\n        // TODO(sorvell): Since we do not cache CSSResults by input, any\n        // shared styles will generate new stylesheet objects, which is wasteful.\n        // This should be addressed when a browser ships constructable\n        // stylesheets.\n        const userStyles = this.getStyles();\n        if (Array.isArray(userStyles)) {\n            // De-duplicate styles preserving the _last_ instance in the set.\n            // This is a performance optimization to avoid duplicated styles that can\n            // occur especially when composing via subclassing.\n            // The last item is kept to try to preserve the cascade order with the\n            // assumption that it's most important that last added styles override\n            // previous styles.\n            const addStyles = (styles, set) => styles.reduceRight((set, s) => \n            // Note: On IE set.add() does not return the set\n            Array.isArray(s) ? addStyles(s, set) : (set.add(s), set), set);\n            // Array.from does not work on Set in IE, otherwise return\n            // Array.from(addStyles(userStyles, new Set<CSSResult>())).reverse()\n            const set = addStyles(userStyles, new Set());\n            const styles = [];\n            set.forEach((v) => styles.unshift(v));\n            this._styles = styles;\n        }\n        else {\n            this._styles = userStyles === undefined ? [] : [userStyles];\n        }\n        // Ensure that there are no invalid CSSStyleSheet instances here. They are\n        // invalid in two conditions.\n        // (1) the sheet is non-constructible (`sheet` of a HTMLStyleElement), but\n        //     this is impossible to check except via .replaceSync or use\n        // (2) the ShadyCSS polyfill is enabled (:. supportsAdoptingStyleSheets is\n        //     false)\n        this._styles = this._styles.map((s) => {\n            if (s instanceof CSSStyleSheet && !supportsAdoptingStyleSheets) {\n                // Flatten the cssText from the passed constructible stylesheet (or\n                // undetectable non-constructible stylesheet). The user might have\n                // expected to update their stylesheets over time, but the alternative\n                // is a crash.\n                const cssText = Array.prototype.slice.call(s.cssRules)\n                    .reduce((css, rule) => css + rule.cssText, '');\n                return unsafeCSS(cssText);\n            }\n            return s;\n        });\n    }\n    /**\n     * Performs element initialization. By default this calls\n     * [[`createRenderRoot`]] to create the element [[`renderRoot`]] node and\n     * captures any pre-set values for registered properties.\n     */\n    initialize() {\n        super.initialize();\n        this.constructor._getUniqueStyles();\n        this.renderRoot = this.createRenderRoot();\n        // Note, if renderRoot is not a shadowRoot, styles would/could apply to the\n        // element's getRootNode(). While this could be done, we're choosing not to\n        // support this now since it would require different logic around de-duping.\n        if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {\n            this.adoptStyles();\n        }\n    }\n    /**\n     * Returns the node into which the element should render and by default\n     * creates and returns an open shadowRoot. Implement to customize where the\n     * element's DOM is rendered. For example, to render into the element's\n     * childNodes, return `this`.\n     * @returns {Element|DocumentFragment} Returns a node into which to render.\n     */\n    createRenderRoot() {\n        return this.attachShadow({ mode: 'open' });\n    }\n    /**\n     * Applies styling to the element shadowRoot using the [[`styles`]]\n     * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where\n     * available and will fallback otherwise. When Shadow DOM is polyfilled,\n     * ShadyCSS scopes styles and adds them to the document. When Shadow DOM\n     * is available but `adoptedStyleSheets` is not, styles are appended to the\n     * end of the `shadowRoot` to [mimic spec\n     * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n     */\n    adoptStyles() {\n        const styles = this.constructor._styles;\n        if (styles.length === 0) {\n            return;\n        }\n        // There are three separate cases here based on Shadow DOM support.\n        // (1) shadowRoot polyfilled: use ShadyCSS\n        // (2) shadowRoot.adoptedStyleSheets available: use it\n        // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after\n        // rendering\n        if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {\n            window.ShadyCSS.ScopingShim.prepareAdoptedCssText(styles.map((s) => s.cssText), this.localName);\n        }\n        else if (supportsAdoptingStyleSheets) {\n            this.renderRoot.adoptedStyleSheets =\n                styles.map((s) => s instanceof CSSStyleSheet ? s : s.styleSheet);\n        }\n        else {\n            // This must be done after rendering so the actual style insertion is done\n            // in `update`.\n            this._needsShimAdoptedStyleSheets = true;\n        }\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        // Note, first update/render handles styleElement so we only call this if\n        // connected after first update.\n        if (this.hasUpdated && window.ShadyCSS !== undefined) {\n            window.ShadyCSS.styleElement(this);\n        }\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes\n     * and calls `render` to render DOM via lit-html. Setting properties inside\n     * this method will *not* trigger another update.\n     * @param _changedProperties Map of changed properties with old values\n     */\n    update(changedProperties) {\n        // Setting properties in `render` should not trigger an update. Since\n        // updates are allowed after super.update, it's important to call `render`\n        // before that.\n        const templateResult = this.render();\n        super.update(changedProperties);\n        // If render is not implemented by the component, don't call lit-html render\n        if (templateResult !== renderNotImplemented) {\n            this.constructor\n                .render(templateResult, this.renderRoot, { scopeName: this.localName, eventContext: this });\n        }\n        // When native Shadow DOM is used but adoptedStyles are not supported,\n        // insert styling after rendering to ensure adoptedStyles have highest\n        // priority.\n        if (this._needsShimAdoptedStyleSheets) {\n            this._needsShimAdoptedStyleSheets = false;\n            this.constructor._styles.forEach((s) => {\n                const style = document.createElement('style');\n                style.textContent = s.cssText;\n                this.renderRoot.appendChild(style);\n            });\n        }\n    }\n    /**\n     * Invoked on each update to perform rendering tasks. This method may return\n     * any value renderable by lit-html's `NodePart` - typically a\n     * `TemplateResult`. Setting properties inside this method will *not* trigger\n     * the element to update.\n     */\n    render() {\n        return renderNotImplemented;\n    }\n}\n/**\n * Ensure this class is marked as `finalized` as an optimization ensuring\n * it will not needlessly try to `finalize`.\n *\n * Note this property name is a string to prevent breaking Closure JS Compiler\n * optimizations. See updating-element.ts for more information.\n */\nLitElement['finalized'] = true;\n/**\n * Reference to the underlying library method used to render the element's\n * DOM. By default, points to the `render` method from lit-html's shady-render\n * module.\n *\n * **Most users will never need to touch this property.**\n *\n * This  property should not be confused with the `render` instance method,\n * which should be overridden to define a template for the element.\n *\n * Advanced users creating a new base class based on LitElement can override\n * this property to point to a custom render method with a signature that\n * matches [shady-render's `render`\n * method](https://lit-html.polymer-project.org/api/modules/shady_render.html#render).\n *\n * @nocollapse\n */\nLitElement.render = render;\n//# sourceMappingURL=lit-element.js.map","const appliedClassMixins = new WeakMap();\n\n/** Vefify if the Mixin was previously applyed\n * @private\n * @param {function} mixin      Mixin being applyed\n * @param {object} superClass   Class receiving the new mixin\n * @returns {boolean}\n */\nfunction wasMixinPreviouslyApplied(mixin, superClass) {\n  let klass = superClass;\n  while (klass) {\n    if (appliedClassMixins.get(klass) === mixin) {\n      return true;\n    }\n    klass = Object.getPrototypeOf(klass);\n  }\n  return false;\n}\n\n/** Apply each mixin in the chain to make sure they are not applied more than once to the final class.\n * @export\n * @param {function} mixin      Mixin to be applyed\n * @returns {object}            Mixed class with mixin applied\n */\nexport function dedupeMixin(mixin) {\n  return superClass => {\n    if (wasMixinPreviouslyApplied(mixin, superClass)) {\n      return superClass;\n    }\n    const mixedClass = mixin(superClass);\n    appliedClassMixins.set(mixedClass, mixin);\n    return mixedClass;\n  };\n}\n","/**\n * Cache class that allows to search in a cache hierarchy.\n * @template T, Q\n */\nexport class Cache {\n  /**\n   * Creates a Cache instance\n   * @param {Cache} [parent]\n   */\n  constructor(parent) {\n    this._parent = parent;\n    this._cache = new Map();\n  }\n\n  /**\n   * Returns a boolean indicating whether an element with the specified key exists or not.\n   *\n   * @param {T} key - The key of the element to test for presence in the Cache object.\n   * @return {boolean}\n   */\n  has(key) {\n    return !!(this._cache.has(key) || (this._parent && this._parent._cache.has(key)));\n  }\n\n  /**\n   * Adds or updates an element with a specified key and a value to a Cache object.\n   *\n   * @param {T} key - The key of the element to add to the Cache object.\n   * @param {Q} value - The value of the element to add to the Cache object.\n   * @return {Cache<T, Q>} the cache object\n   */\n  set(key, value) {\n    this._cache.set(key, value);\n\n    return this;\n  }\n\n  /**\n   * Returns a specified element from a Map object. If the value that is associated to the provided key is an\n   * object, then you will get a reference to that object and any change made to that object will effectively modify\n   * it inside the Map object.\n   *\n   * @param {T} key - The key of the element to return from the Cache object.\n   * @return {Q}\n   */\n  get(key) {\n    return this._cache.get(key) || (this._parent && this._parent._cache.get(key));\n  }\n}\n","/**\n * Global counter to scope the custom elements\n *\n * @type {number}\n */\nlet counter = Math.round(Math.random() * 100000);\n\n/**\n * Allowed tag name chars\n *\n * @type {string}\n */\nconst chars = `-|\\\\.|[0-9]|[a-z]`;\n\n/**\n * Regular expression to check if a value is a valid tag name\n *\n * @type {RegExp}\n */\nconst tagRegExp = new RegExp(`[a-z](${chars})*-(${chars})*`);\n\n/**\n * Checks if the tag name is valid\n *\n * @param {string} tag\n * @returns {boolean}\n */\nconst isValid = tag => tagRegExp.exec(tag) !== null;\n\n/**\n * Checks if the tag is already registered\n *\n * @param {string} name\n * @param {CustomElementRegistry} registry\n * @returns {boolean}\n */\nconst isTagRegistered = (name, registry) => !!registry.get(name);\n\n/**\n * Given a tag name scopes it with a number suffix\n *\n * @param {string} tagName\n * @param {CustomElementRegistry} registry\n * @returns {string} scoped tag name\n */\nconst incrementTagName = (tagName, registry) => {\n  const newTagName = `${tagName}-${(counter += 1)}`;\n\n  if (isTagRegistered(newTagName, registry)) {\n    return incrementTagName(tagName, registry);\n  }\n\n  return newTagName;\n};\n\n/**\n * Creates a unique scoped tag name\n *\n * @exports\n * @param {string} tagName - tag name to scope\n * @param {CustomElementRegistry} registry\n * @returns {string} scoped tag name\n */\nexport function createUniqueTag(tagName, registry = customElements) {\n  if (!isValid(tagName)) {\n    throw new Error('tagName is invalid');\n  }\n\n  return incrementTagName(tagName, registry);\n}\n","/**\n * The global cache for tag names\n *\n * @type {WeakMap<typeof HTMLElement, string>}\n */\nconst globalTagsCache = new WeakMap();\n\n/**\n * Adds a tag to the global tags cache\n *\n * @param {string} tag\n * @param {typeof HTMLElement} klass\n */\nexport const addToGlobalTagsCache = (tag, klass) => globalTagsCache.set(klass, tag);\n\n/**\n * Gets a tag from the global tags cache\n *\n * @exports\n * @param {typeof HTMLElement} klass\n * @returns {undefined|string}\n */\nexport const getFromGlobalTagsCache = klass => globalTagsCache.get(klass);\n","import { createUniqueTag } from './createUniqueTag.js';\nimport { getFromGlobalTagsCache, addToGlobalTagsCache } from './globalTagsCache.js';\n\n/**\n * Checks if klass is a subclass of HTMLElement\n *\n * @param {typeof HTMLElement} klass\n * @returns {boolean}\n */\nconst extendsHTMLElement = klass => Object.prototype.isPrototypeOf.call(HTMLElement, klass);\n\n/**\n * Defines a custom element\n *\n * @param {string} tagName\n * @param {typeof HTMLElement} klass\n * @param {CustomElementRegistry} registry\n */\nconst defineElement = (tagName, klass, registry = customElements) => {\n  addToGlobalTagsCache(tagName, klass);\n  registry.define(tagName, class extends klass {});\n};\n\n/**\n * Stores a lazy element in the cache to be used in future\n *\n * @param {string} tagName\n * @param {CustomElementRegistry} registry\n * @param {import('./Cache.js').Cache<string, string>} tagsCache\n * @returns {string}\n */\nconst storeLazyElementInCache = (tagName, registry, tagsCache) => {\n  const tag = createUniqueTag(tagName, registry);\n\n  if (!tagsCache) {\n    throw new Error('Lazy scoped elements requires the use of tags cache');\n  }\n\n  tagsCache.set(tagName, tag);\n\n  return tag;\n};\n\n/**\n * Define a scoped custom element storing the scoped tag name in the cache\n *\n * @param {string} tagName\n * @param {typeof HTMLElement} klass\n * @param {import('./Cache.js').Cache<string, string>} tagsCache\n * @returns {string}\n */\nconst defineElementAndStoreInCache = (tagName, klass, tagsCache) => {\n  const registry = customElements;\n\n  if (!extendsHTMLElement(klass)) {\n    return storeLazyElementInCache(tagName, registry, tagsCache);\n  }\n\n  if (klass === customElements.get(tagName)) {\n    addToGlobalTagsCache(tagName, klass);\n\n    return tagName;\n  }\n\n  const tag = createUniqueTag(tagName, registry);\n  // @ts-ignore\n  // we extend it just in case the class has been defined manually\n  defineElement(tag, klass, registry);\n\n  return tag;\n};\n\n/**\n * Gets a scoped tag name from the cache or generates a new one and defines the element if needed\n *\n * @exports\n * @param {string} tagName\n * @param {typeof HTMLElement} klass\n * @param {import('./Cache.js').Cache<string, string>} tagsCache\n * @returns {string}\n */\nexport function registerElement(tagName, klass, tagsCache = undefined) {\n  const tag =\n    getFromGlobalTagsCache(klass) ||\n    (tagsCache && tagsCache.get(tagName)) ||\n    defineElementAndStoreInCache(tagName, klass, tagsCache);\n\n  return tag;\n}\n\n/**\n * Defines a lazy element\n *\n * @param {string} tagName\n * @param {typeof HTMLElement} klass\n * @param {import('./Cache.js').Cache<string, string>} tagsCache\n */\nexport function defineScopedElement(tagName, klass, tagsCache) {\n  const tag = tagsCache.get(tagName);\n\n  if (tag) {\n    if (customElements.get(tag) === undefined) {\n      defineElement(tag, klass, customElements);\n    }\n  } else {\n    tagsCache.set(tagName, registerElement(tagName, klass, tagsCache));\n  }\n}\n","import { registerElement } from './registerElement.js';\nimport { Cache } from './Cache.js';\n\n/**\n * @typedef {import('./types').ScopedElementsMap} ScopedElementsMap\n */\n\n/**\n * Allowed tag name chars\n *\n * @type {string}\n */\nconst chars = `-|\\\\.|[0-9]|[a-z]`;\n\n/**\n * Regular Expression to find a custom element tag\n *\n * @type {RegExp}\n */\nconst re = new RegExp(`<\\\\/?([a-z](${chars})*-(${chars})*)`, 'g');\n\n/**\n * The global cache of processed string arrays\n *\n * @type {Cache<TemplateStringsArray, TemplateStringsArray>}\n */\nconst globalCache = new Cache();\n\n/**\n * Find custom element tags in the string\n *\n * @param {string} str\n * @returns {RegExpExecArray[]}\n */\nconst matchAll = str => {\n  const matches = [];\n  let result;\n  // eslint-disable-next-line no-cond-assign\n  while ((result = re.exec(str)) !== null) {\n    matches.push(result);\n  }\n\n  return matches;\n};\n\n/**\n * Transforms a string array into another one with resolved scoped elements and caches it for future references\n *\n * @param {TemplateStringsArray} strings\n * @param {ScopedElementsMap} scopedElements\n * @param {Cache<TemplateStringsArray, TemplateStringsArray>} templateCache\n * @param {Cache<string, string>} tagsCache\n * @returns {TemplateStringsArray}\n */\nconst transformTemplate = (strings, scopedElements, templateCache, tagsCache) => {\n  const transformedStrings = strings.map(str => {\n    let acc = str;\n    const matches = matchAll(str);\n\n    for (let i = matches.length - 1; i >= 0; i -= 1) {\n      const item = matches[i];\n      const [block, tagName] = item;\n      const tag = registerElement(tagName, scopedElements[tagName], tagsCache);\n      const start = item.index + block.length - tagName.length;\n      const end = start + tagName.length;\n      const isClosingTag = block.indexOf('</') === 0;\n\n      acc =\n        acc.slice(0, start) +\n        (isClosingTag ? tag : `${tag} data-tag-name=\"${tagName}\"`) +\n        acc.slice(end);\n    }\n\n    return acc;\n  });\n\n  // @ts-ignore\n  // noinspection JSCheckFunctionSignatures\n  templateCache.set(strings, transformedStrings);\n\n  // @ts-ignore\n  // noinspection JSValidateTypes\n  return transformedStrings;\n};\n\n/**\n * Obtains the cached strings array with resolved scoped elements or creates it\n *\n * @exports\n * @param {TemplateStringsArray} strings\n * @param {ScopedElementsMap} scopedElements\n * @param {import('./Cache.js').Cache<TemplateStringsArray, TemplateStringsArray>} templateCache\n * @param {import('./Cache.js').Cache<string, string>} tagsCache\n * @returns {TemplateStringsArray}\n */\nexport function transform(strings, scopedElements, templateCache = globalCache, tagsCache) {\n  return (\n    templateCache.get(strings) ||\n    transformTemplate(strings, scopedElements, templateCache, tagsCache)\n  );\n}\n","import { templateCaches } from 'lit-html/lib/template-factory.js';\nimport { marker, Template } from 'lit-html/lib/template.js';\n\nconst getTemplateCacheKey = (type, scopeName) => `${type}--${scopeName}`;\n\nlet compatibleShadyCSSVersion = true;\n\n// @ts-ignore\nconst { ShadyCSS } = window;\n\nif (typeof ShadyCSS === 'undefined') {\n  compatibleShadyCSSVersion = false;\n} else if (typeof ShadyCSS.prepareTemplateDom === 'undefined') {\n  compatibleShadyCSSVersion = false;\n}\n\n/**\n * Template factory which scopes template DOM using ShadyCSS.\n * @param scopeName {string}\n */\nexport const shadyTemplateFactory = scopeName => result => {\n  const cacheKey = getTemplateCacheKey(result.type, scopeName);\n  let templateCache = templateCaches.get(cacheKey);\n  if (templateCache === undefined) {\n    templateCache = {\n      stringsArray: new WeakMap(),\n      keyString: new Map(),\n    };\n    templateCaches.set(cacheKey, templateCache);\n  }\n  let template = templateCache.stringsArray.get(result.strings);\n  if (template !== undefined) {\n    return template;\n  }\n  const key = result.strings.join(marker);\n  template = templateCache.keyString.get(key);\n  if (template === undefined) {\n    const element = result.getTemplateElement();\n    if (compatibleShadyCSSVersion) {\n      ShadyCSS.prepareTemplateDom(element, scopeName);\n    }\n    template = new Template(result, element);\n    templateCache.keyString.set(key, template);\n  }\n  templateCache.stringsArray.set(result.strings, template);\n  return template;\n};\n","/* eslint-disable no-use-before-define */\nimport { TemplateResult } from 'lit-html';\nimport { dedupeMixin } from '@open-wc/dedupe-mixin';\nimport { Cache } from './Cache.js';\nimport { transform } from './transform.js';\nimport { defineScopedElement, registerElement } from './registerElement.js';\nimport { shadyTemplateFactory } from './shadyTemplateFactory.js';\n\n/**\n * @typedef {import('./types').ScopedElementsMixin} ScopedElementsMixin\n * @typedef {import('./types').ScopedElementsMap} ScopedElementsMap\n * @typedef {import(\"lit-element\").LitElement} LitElement\n * @typedef {import('lit-html/lib/shady-render').ShadyRenderOptions} ShadyRenderOptions\n * @typedef {function(TemplateResult, Element|DocumentFragment|ShadowRoot, ShadyRenderOptions): void} RenderFunction\n */\n\n/**\n * Template caches\n *\n * @type {WeakMap<Function, Cache<TemplateStringsArray, TemplateStringsArray>>}\n */\nconst templateCaches = new WeakMap();\n\n/**\n * Retrieves or creates a templateCache for a specific key\n *\n * @param {Function} key\n * @returns {Cache<TemplateStringsArray, TemplateStringsArray>}\n */\nconst getTemplateCache = key => {\n  if (!templateCaches.has(key)) {\n    // @ts-ignore\n    templateCaches.set(key, new Cache(templateCaches.get(key.constructor)));\n  }\n\n  return templateCaches.get(key);\n};\n\n/**\n * Tags caches\n *\n * @type {WeakMap<object, Cache<string, string>>}\n */\nconst tagsCaches = new WeakMap();\n\n/**\n * Retrieves or creates a tagsCache for a specific key\n * @param {object} key\n * @returns {Cache<string, string>}\n */\nconst getTagsCache = key => {\n  if (!tagsCaches.has(key)) {\n    tagsCaches.set(key, new Cache(tagsCaches.get(key.constructor)));\n  }\n\n  return tagsCaches.get(key);\n};\n\n/**\n * Transforms an array of TemplateResults or arrays into another one with resolved scoped elements\n *\n * @param {ReadonlyArray} items\n * @param {ScopedElementsMap} scopedElements\n * @param {Cache<TemplateStringsArray, TemplateStringsArray>} templateCache\n * @param {Cache<string, string>} tagsCache\n * @returns {ReadonlyArray}\n */\nconst transformArray = (items, scopedElements, templateCache, tagsCache) =>\n  items.map(value => {\n    if (value instanceof TemplateResult) {\n      return transformTemplate(value, scopedElements, templateCache, tagsCache);\n    }\n\n    if (Array.isArray(value)) {\n      return transformArray(value, scopedElements, templateCache, tagsCache);\n    }\n\n    return value;\n  });\n\n/**\n * Transforms a TemplateResult into another one with resolved scoped elements\n *\n * @param {TemplateResult} template\n * @param {ScopedElementsMap} scopedElements\n * @param {Cache<TemplateStringsArray, TemplateStringsArray>} templateCache\n * @param {Cache<string, string>} tagsCache\n * @returns {TemplateResult}\n */\nconst transformTemplate = (template, scopedElements, templateCache, tagsCache) =>\n  new TemplateResult(\n    transform(template.strings, scopedElements, templateCache, tagsCache),\n    transformArray(template.values, scopedElements, templateCache, tagsCache),\n    template.type,\n    template.processor,\n  );\n\n/**\n * Gets an instance of the ScopedElementsTemplateFactory\n *\n * @param {string} scopeName\n * @param {ScopedElementsMap} scopedElements\n * @param {Cache<TemplateStringsArray, TemplateStringsArray>} templateCache\n * @param {Cache<string, string>} tagsCache\n * @returns {function(any): any}\n */\nconst scopedElementsTemplateFactory = (\n  scopeName,\n  scopedElements,\n  templateCache,\n  tagsCache,\n) => template => {\n  const newTemplate = transformTemplate(template, scopedElements, templateCache, tagsCache);\n\n  return shadyTemplateFactory(scopeName)(newTemplate);\n};\n\n/** @type {ScopedElementsMixin} */\nconst ScopedElementsMixinImplementation = superclass =>\n  class ScopedElementsHost extends superclass {\n    /**\n     * Obtains the scoped elements definitions map\n     *\n     * @returns {ScopedElementsMap}\n     */\n    static get scopedElements() {\n      return {};\n    }\n\n    /** @override */\n    static render(template, container, options) {\n      if (!options || typeof options !== 'object' || !options.scopeName) {\n        throw new Error('The `scopeName` option is required.');\n      }\n      const { scopeName, eventContext } = options;\n\n      const templateCache = getTemplateCache(eventContext);\n      const tagsCache = getTagsCache(eventContext);\n      const { scopedElements } = this;\n\n      return super.render(template, container, {\n        ...options,\n        templateFactory: scopedElementsTemplateFactory(\n          scopeName,\n          scopedElements,\n          templateCache,\n          tagsCache,\n        ),\n      });\n    }\n\n    /**\n     * Defines a scoped element\n     *\n     * @param {string} tagName\n     * @param {typeof HTMLElement} klass\n     */\n    defineScopedElement(tagName, klass) {\n      return defineScopedElement(tagName, klass, getTagsCache(this));\n    }\n\n    /**\n     * Returns a scoped tag name\n     *\n     * @deprecated Please, use the instance method instead of the static one. This static method is not able to\n     * obtain the tagName of lazy defined elements, while the instance one is.\n     * @param {string} tagName\n     * @returns {string|undefined}\n     */\n    static getScopedTagName(tagName) {\n      // @ts-ignore\n      const klass = this.scopedElements[tagName];\n\n      return klass\n        ? registerElement(tagName, klass, getTagsCache(this))\n        : getTagsCache(this).get(tagName);\n    }\n\n    /**\n     * Returns a scoped tag name\n     *\n     * @param {string} tagName\n     * @returns {string|undefined}\n     */\n    getScopedTagName(tagName) {\n      // @ts-ignore\n      const klass = this.constructor.scopedElements[tagName];\n\n      return klass\n        ? registerElement(tagName, klass, getTagsCache(this))\n        : getTagsCache(this).get(tagName);\n    }\n  };\n\nexport const ScopedElementsMixin = dedupeMixin(ScopedElementsMixinImplementation);\n","import environment from 'consts:environment';\n\n/**\n * Parses a link header\n *\n * The node module parse-link-header didn't work, so https://gist.github.com/niallo/3109252 became handy\n *\n * @param header\n */\nexport const parseLinkHeader = (header) => {\n    if (header.length === 0) {\n        throw new Error(\"input must not be of zero length\");\n    }\n\n    // Split parts by comma\n    const parts = header.split(',');\n    const links = {};\n\n    // Parse each part into a named link\n    for(let i=0; i<parts.length; i++) {\n        const section = parts[i].split(';');\n        if (section.length !== 2) {\n            throw new Error(\"section could not be split on ';'\");\n        }\n        const url = section[0].replace(/<(.*)>/, '$1').trim();\n        const name = section[1].replace(/rel=\"(.*)\"/, '$1').trim();\n        links[name] = url;\n    }\n\n    return links;\n};\n\nexport const getAPiUrl = (path = \"\") => {\n    let apiBaseUrl = '';\n\n    switch(environment) {\n        case \"development\":\n            apiBaseUrl = 'https://mw-dev.tugraz.at';\n            break;\n        case \"demo\":\n            apiBaseUrl = 'https://api-demo.tugraz.at';\n            break;\n        case \"production\":\n            apiBaseUrl = 'https://api.tugraz.at';\n            break;\n        case \"bs\":\n            apiBaseUrl = 'http://bs-local.com:8000';\n            break;\n        case \"local\":\n        default:\n            apiBaseUrl = 'http://127.0.0.1:8000';\n    }\n\n    return apiBaseUrl + path;\n};\n\n/**\n * Parses the base url from an url\n *\n * @param url\n * @returns {string}\n */\nexport const parseBaseUrl = (url) => {\n    const pathArray = url.split('/');\n    const protocol = pathArray[0];\n    const host = pathArray[2];\n    return protocol + '//' + host;\n};\n\n/**\n * Converts a string list to a data array for Select2\n *\n * @param list\n * @returns {Array}\n */\nexport const stringListToSelect2DataArray = (list) => {\n    let data = [];\n    list.forEach((item) => {data.push({id: item, text: item});});\n    return data;\n};\n\n/**\n * Does generic Base64 Encoding with support for 16-bit encoded strings\n *\n * @see https://www.base64encoder.io/javascript/\n *\n * @param str\n * @returns {string}\n */\nexport const base64EncodeUnicode = (str) => {\n    // First we escape the string using encodeURIComponent to get the UTF-8 encoding of the characters,\n    // then we convert the percent encodings into raw bytes, and finally feed it to btoa() function.\n    const utf8Bytes = encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, function(match, p1) {\n        return String.fromCharCode('0x' + p1);\n    });\n\n    return btoa(utf8Bytes);\n};\n\n/**\n * Like customElements.define() but tries to display an error in case the browser doesn't\n * support everything we need.\n *\n * Returns false in case define failed, true otherwise.\n *\n * @returns {boolean}\n */\n\n/**\n * \n * @param {string} name \n * @param {Function} constructor \n * @param {object} options \n */\nexport const defineCustomElement = (name, constructor, options) => {\n    // In case the constructor is already defined just do nothing\n    if (customElements.get(name) === constructor) {\n        return true;\n    }\n    // Checks taken from https://github.com/webcomponents/webcomponentsjs/blob/master/webcomponents-loader.js\n    if (!('attachShadow' in Element.prototype && 'getRootNode' in Element.prototype && window.customElements)) {\n        var elements = document.getElementsByTagName(name);\n        for(var i=0; i < elements.length; i++) {\n            elements[i].innerHTML = \"<span style='border: 1px solid red; font-size: 0.8em; \"\n                + \"opacity: 0.5; padding: 0.2em;'>☹ Your browser is not supported ☹</span>\";\n        }\n       return false;\n    }\n    customElements.define(name, constructor, options);\n    return true;\n};\n\n/**\n * Creates a random id\n *\n * taken from: https://stackoverflow.com/a/1349426/1581487\n *\n * @param length\n * @returns {string}\n */\nexport const makeId = (length) => {\n    let result           = '';\n    const characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    const charactersLength = characters.length;\n    for ( let i = 0; i < length; i++ ) {\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n\n    return result;\n};\n\n/**\n * Pads a number with a 0 so it has two digits\n *\n * @param n\n * @returns {string}\n */\nexport const pad10 = (n) => { return n < 10 ? '0' + n : n; };\n\n/**\n * Converts a date object or string to a local iso datetime with stripped seconds and timezone for the datetime-local input\n *\n * @param date\n * @returns {string}\n */\nexport const dateToStrippedIsoDT = (date) => {\n    if (!(date instanceof Date)) {\n        date = new Date(date);\n    }\n\n    return `${date.getFullYear()}-${pad10(date.getMonth()+1)}-${pad10(date.getDate())}T${pad10(date.getHours())}:${pad10(date.getMinutes())}`;\n};\n\n/**\n * Converts a date object or string to a local date string the date input\n *\n * @param date\n * @returns {string}\n */\nexport const dateToInputDateString = (date) => {\n    if (!(date instanceof Date)) {\n        date = new Date(date);\n    }\n\n    return `${date.getFullYear()}-${pad10(date.getMonth()+1)}-${pad10(date.getDate())}`;\n};\n\n/**\n * Converts a date object or string to a local time string the time input\n *\n * @param date\n * @returns {string}\n */\nexport const dateToInputTimeString = (date) => {\n    if (!(date instanceof Date)) {\n        date = new Date(date);\n    }\n\n    return `${pad10(date.getHours())}:${pad10(date.getMinutes())}`;\n};\n\n/**\n * Get an absolute path for assets given a relative path to the js bundle.\n *\n * @param {string} pkg The package which provides the asset\n * @param {string} path The relative path based on the js bundle path\n */\nexport const getAssetURL = (pkg, path) => {\n    let fullPath = '';\n    if (path === undefined) {\n        // backwards compat: in case only one parameter is passed\n        // assume it is a full path\n        fullPath = pkg;\n    } else {\n        fullPath = 'local/' + pkg + '/' + path\n    }\n    return new URL(fullPath, new URL('..', import.meta.url).href).href;\n};\n\n\n/**\n * Poll <fn> every <interval> ms until <timeout> ms\n *\n * @param fn\n * @param timeout\n * @param interval\n */\nexport const pollFunc = (fn, timeout, interval) => {\n    var startTime = (new Date()).getTime();\n    interval = interval || 1000;\n\n    (function p() {\n        // don't retry if we took longer than timeout ms\n        if (((new Date).getTime() - startTime ) > timeout) {\n            return;\n        }\n\n        // retry until fn() returns true\n        if (!fn())  {\n            setTimeout(p, interval);\n        }\n    })();\n};\n\n/**\n * Doing a async foreach for non-linear integer keys\n *\n * @param array\n * @param callback\n * @returns {Promise<void>}\n */\nexport async function asyncObjectForEach(array, callback) {\n    const keys = Object.keys(array);\n\n    for (let index = 0; index < keys.length; index++) {\n        const key = keys[index];\n        await callback(array[key], key, array);\n    }\n}\n\n/**\n * Doing a async foreach for non-linear integer keys with a copy of the array\n *\n * @param array\n * @param callback\n * @returns {Promise<void>}\n */\nexport async function asyncCopyObjectForEach(array, callback) {\n    const arrayCopy = {...array};\n    const keys = Object.keys(arrayCopy);\n\n    for (let index = 0; index < keys.length; index++) {\n        const key = keys[index];\n        await callback(arrayCopy[key], key, arrayCopy);\n    }\n}\n\n/**\n * Doing a async foreach for linear integer keys\n *\n * @param array\n * @param callback\n * @returns {Promise<void>}\n */\nexport async function asyncArrayForEach(array, callback) {\n    for (let index = 0; index < array.length; index++) {\n        await callback(array[index], index, array);\n    }\n}\n\n/**\n * Attempts to determine the mime type of a file or blob\n *\n * @param file\n * @returns {Promise<unknown>}\n */\nexport async function getMimeTypeOfFile(file) {\n    const getMimeType = (signature) => {\n        switch (signature) {\n            case '89504E47':\n                return 'image/png'\n            case '47494638':\n                return 'image/gif'\n            case '25504446':\n                return 'application/pdf'\n            case 'FFD8FFDB':\n            case 'FFD8FFE0':\n            case 'FFD8FFE1':\n                return 'image/jpeg'\n            case '504B0304':\n                return 'application/zip'\n            default:\n                return 'Unknown filetype'\n        }\n    }\n\n    return await new Promise((resolve) => {\n        let fileReader = new FileReader();\n\n        fileReader.onloadend = function (evt) {\n            if (evt.target.readyState === FileReader.DONE) {\n                const uint = new Uint8Array(evt.target.result);\n                let bytes = [];\n\n                uint.forEach((byte) => {\n                    bytes.push(byte.toString(16))\n                })\n\n                const hex = bytes.join('').toUpperCase();\n                const mimeType = getMimeType(hex);\n\n                resolve(mimeType);\n            }\n        }\n\n        fileReader.readAsArrayBuffer(file.slice(0, 4));\n    });\n}\n\n/**\n * Get the basename of a filename\n *\n * @param str\n * @returns {string}\n */\nexport const getBaseName = (str) => {\n    let base = String(str).substring(str.lastIndexOf('/') + 1);\n\n    if (base.lastIndexOf(\".\") !== -1) {\n        base = base.substring(0, base.lastIndexOf(\".\"));\n    }\n\n    return base;\n};\n\n/**\n * Get the file extension of a filename\n *\n * @param str\n * @returns {string}\n */\nexport const getFileExtension = (str) => {\n    return str.split('.').pop();\n};\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { isPrimitive } from '../lib/parts.js';\nimport { directive, NodePart } from '../lit-html.js';\n// For each part, remember the value that was last rendered to the part by the\n// unsafeHTML directive, and the DocumentFragment that was last set as a value.\n// The DocumentFragment is used as a unique key to check if the last value\n// rendered to the part was with unsafeHTML. If not, we'll always re-render the\n// value passed to unsafeHTML.\nconst previousValues = new WeakMap();\n/**\n * Renders the result as HTML, rather than text.\n *\n * Note, this is unsafe to use with any user-provided input that hasn't been\n * sanitized or escaped, as it may lead to cross-site-scripting\n * vulnerabilities.\n */\nexport const unsafeHTML = directive((value) => (part) => {\n    if (!(part instanceof NodePart)) {\n        throw new Error('unsafeHTML can only be used in text bindings');\n    }\n    const previousValue = previousValues.get(part);\n    if (previousValue !== undefined && isPrimitive(value) &&\n        value === previousValue.value && part.value === previousValue.fragment) {\n        return;\n    }\n    const template = document.createElement('template');\n    template.innerHTML = value; // innerHTML casts to string internally\n    const fragment = document.importNode(template.content, true);\n    part.setValue(fragment);\n    previousValues.set(part, { value, fragment });\n});\n//# sourceMappingURL=unsafe-html.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { isPrimitive } from '../lib/parts.js';\nimport { directive } from '../lit-html.js';\nconst _state = new WeakMap();\n// Effectively infinity, but a SMI.\nconst _infinity = 0x7fffffff;\n/**\n * Renders one of a series of values, including Promises, to a Part.\n *\n * Values are rendered in priority order, with the first argument having the\n * highest priority and the last argument having the lowest priority. If a\n * value is a Promise, low-priority values will be rendered until it resolves.\n *\n * The priority of values can be used to create placeholder content for async\n * data. For example, a Promise with pending content can be the first,\n * highest-priority, argument, and a non_promise loading indicator template can\n * be used as the second, lower-priority, argument. The loading indicator will\n * render immediately, and the primary content will render when the Promise\n * resolves.\n *\n * Example:\n *\n *     const content = fetch('./content.txt').then(r => r.text());\n *     html`${until(content, html`<span>Loading...</span>`)}`\n */\nexport const until = directive((...args) => (part) => {\n    let state = _state.get(part);\n    if (state === undefined) {\n        state = {\n            lastRenderedIndex: _infinity,\n            values: [],\n        };\n        _state.set(part, state);\n    }\n    const previousValues = state.values;\n    let previousLength = previousValues.length;\n    state.values = args;\n    for (let i = 0; i < args.length; i++) {\n        // If we've rendered a higher-priority value already, stop.\n        if (i > state.lastRenderedIndex) {\n            break;\n        }\n        const value = args[i];\n        // Render non-Promise values immediately\n        if (isPrimitive(value) ||\n            typeof value.then !== 'function') {\n            part.setValue(value);\n            state.lastRenderedIndex = i;\n            // Since a lower-priority value will never overwrite a higher-priority\n            // synchronous value, we can stop processing now.\n            break;\n        }\n        // If this is a Promise we've already handled, skip it.\n        if (i < previousLength && value === previousValues[i]) {\n            continue;\n        }\n        // We have a Promise that we haven't seen before, so priorities may have\n        // changed. Forget what we rendered before.\n        state.lastRenderedIndex = _infinity;\n        previousLength = 0;\n        Promise.resolve(value).then((resolvedValue) => {\n            const index = state.values.indexOf(value);\n            // If state.values doesn't contain the value, we've re-rendered without\n            // the value, so don't render it. Then, only render if the value is\n            // higher-priority than what's already been rendered.\n            if (index > -1 && index < state.lastRenderedIndex) {\n                state.lastRenderedIndex = index;\n                part.setValue(resolvedValue);\n                part.commit();\n            }\n        });\n    }\n});\n//# sourceMappingURL=until.js.map","import {html, LitElement, css} from 'lit-element';\nimport {unsafeHTML} from 'lit-html/directives/unsafe-html.js';\nimport {until} from 'lit-html/directives/until.js';\nimport * as commonUtils from '../utils.js';\nimport {name as pkgName} from './../package.json';\n\n// Use in case the icon fails to load\nconst errorIcon = `\n<svg version=\"1.1\" id=\"Layer_2_1_\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t viewBox=\"0 0 100 100\" style=\"enable-background:new 0 0 100 100;\" xml:space=\"preserve\">\n<g>\n\t<path d=\"M38.2,98.7c-1.1,0-2.2-0.6-2.8-1.6c-0.5-0.8-0.6-1.8-0.3-2.6l8.9-37.8H24.5c-1.2,0-2.2-0.6-2.8-1.5c-0.6-1-0.7-2.2-0.1-3.2\n\t\tl0.2-0.3L54.9,3.1c0.9-1.6,2.3-1.8,2.8-1.8c1.1,0,2.2,0.6,2.8,1.6c0.5,0.8,0.6,1.7,0.3,2.6l-6.9,30.4L75.6,36\n\t\tc1.1,0,2.2,0.6,2.8,1.5c0.6,1,0.7,2.2,0.1,3.2l-0.2,0.3L40.8,97.4l-0.2,0.2C40.3,97.9,39.5,98.7,38.2,98.7z M28.6,51.2h18.1\n\t\tc1.8,0,3.2,1.5,3.2,3.4v0.3l-6.8,29l28.2-42.4l-20.3-0.1c-1.8,0-3.2-1.5-3.2-3.4v-0.3l5-21.9L28.6,51.2z M75.5,41.5\n\t\tC75.5,41.5,75.5,41.5,75.5,41.5L75.5,41.5z M51.1,35.9L51.1,35.9C51.2,35.9,51.1,35.9,51.1,35.9z\"/>\n</g>\n</svg>\n`;\n\nexport function getIconSVGURL(name) {\n    return commonUtils.getAssetURL(pkgName, 'icons/' + encodeURI(name) + '.svg');\n}\n\nexport function getIconCSS(name) {\n    const iconURL = getIconSVGURL(name);\n    return `\n        background-color: currentColor;\n        mask-image: url(${ iconURL });\n        -webkit-mask-image: url(${ iconURL });\n        mask-size: contain;\n        -webkit-mask-size: contain;\n        mask-repeat: no-repeat;\n        -webkit-mask-repeat: no-repeat;\n        mask-position: center center;\n        -webkit-mask-position: center center;\n        margin-left: 0.2em;\n        padding-left: 0.3em;\n        content: \"X\";\n    `;\n}\n\nasync function getSVGTextElement(name) {\n    const iconURL = getIconSVGURL(name);\n\n    const response = await fetch(iconURL);\n    if (!response.ok) {\n        return unsafeHTML(errorIcon);\n    }\n    let text = await response.text();\n    if (text.indexOf('<svg') === -1) {\n        return unsafeHTML(errorIcon);\n    }\n    text = text.slice(text.indexOf('<svg'));\n    return unsafeHTML(text);\n}\n\nconst iconCache =  {};\n\n/**\n * Avoid lots of requests in case an icon is used multiple times on the same page.\n *\n * @param {string} name\n */\nasync function getSVGTextElementCached(name) {\n    if (iconCache[name] === undefined) {\n        let promise = getSVGTextElement(name);\n        iconCache[name] = promise;\n        return promise;\n    } else {\n        return iconCache[name];\n    }\n}\n\n/**\n * For icon names see https://lineicons.com\n */\nexport class Icon extends LitElement {\n\n    constructor() {\n        super();\n        this.name = \"bolt\";\n    }\n\n    static get properties() {\n        return { \n          name: { type: String },\n        };\n      }\n\n    static get styles() {\n        return css`\n            :host {\n                display: inline-block;\n                height: 1em;\n                top: .125em;\n                position: relative;\n            }\n\n            svg {\n                height: 100%;\n            }\n\n            svg * {\n                fill: currentColor;\n            }\n        `;\n    } \n\n    render() {\n        let svg = getSVGTextElementCached(this.name);\n        return html`\n            ${until(svg)}\n        `;\n    }\n}","import {html, LitElement, css} from 'lit-element';\n\nexport class MiniSpinner extends LitElement {\n    constructor() {\n        super();\n        this.text = \"\";\n    }\n\n    static get properties() {\n        return {\n            text: { type: String },\n        };\n    }\n\n    static get styles() {\n        // language=css\n        return css`\n        .outer {\n            display: inline-block;\n            vertical-align: sub;\n        }\n        .inner {\n            display: flex;\n        }\n        .ring {\n          display: inline-block;\n          position: relative;\n          width: 1em;\n          height: 1em;\n        }\n        .ring div {\n          box-sizing: border-box;\n          display: block;\n          position: absolute;\n          width: 100%;\n          height: 100%;\n          border: 0.2em solid currentColor;\n          border-radius: 50%;\n          animation: ring 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;\n          border-color: currentColor transparent transparent transparent;\n        }\n        .ring div:nth-child(1) {\n          animation-delay: -0.45s;\n        }\n        .ring div:nth-child(2) {\n          animation-delay: -0.3s;\n        }\n        .ring div:nth-child(3) {\n          animation-delay: -0.15s;\n        }\n        @keyframes ring {\n          0% {\n            transform: rotate(0deg);\n          }\n          100% {\n            transform: rotate(360deg);\n          }\n        }\n        .text {\n            display: inline-block;\n            margin-left: 0.5em;\n            font-size: 0.7em;\n        }`;\n    } \n\n    render() {\n        const textHtml = this.text !== \"\" ? html`<div class=\"text\">${this.text}</div>` : html``;\n\n        return html`<div class=\"outer\"><div class=\"inner\"><div class=\"ring\"><div></div><div></div><div></div><div></div></div>${textHtml}</div></div>`;\n    }\n}\n","import {css, unsafeCSS, CSSResult} from 'lit-element';\nimport {getIconSVGURL} from './src/icon.js';\n\n/**\n * We want to have \"neutral\" colors here\n *\n * @returns {CSSResult}\n */\nexport function getThemeCSS() {\n    // language=css\n    return css`\n        :host {\n            --dbp-primary-bg-color: var(--dbp-override-primary-bg-color, #007bff);\n            --dbp-primary-text-color: var(--dbp-override-primary-text-color, #fff);\n            --dbp-primary-button-border: var(--dbp-override-primary-button-border, #007bff);\n            --dbp-secondary-bg-color: var(--dbp-override-secondary-bg-color, #6c757d);\n            --dbp-secondary-text-color: var(--dbp-override-secondary-text-color, #fff);\n            --dbp-info-bg-color: var(--dbp-override-info-bg-color, #17a2b8);\n            --dbp-info-text-color: var(--dbp-override-info-text-color, #fff);\n            --dbp-success-bg-color: var(--dbp-override-success-bg-color, #28a745);\n            --dbp-success-text-color: var(--dbp-override-success-text-color, #fff);\n            --dbp-warning-bg-color: var(--dbp-override-warning-bg-color, #ffc107);\n            --dbp-warning-text-color: var(--dbp-override-warning-text-color, #343a40);\n            --dbp-danger-bg-color: var(--dbp-override-danger-bg-color, #dc3545);\n            --dbp-danger-text-color: var(--dbp-override-danger-text-color, #fff);\n            --dbp-light: var(--dbp-override-light, #f8f9fa);\n            --dbp-dark: var(--dbp-override-dark, #343a40);\n            --dbp-muted-text: var(--dbp-override-muted-text, #6c757d);\n            --dbp-border-radius: var(--dbp-override-border-radius, 0px);\n            --dbp-border-width: var(--dbp-override-border-width, 1px);\n            --dbp-border-color: var(--dbp-override-border-color, #000);\n            --dbp-placeholder-color: #777; \n        }\n    `;\n}\n\nexport function getGeneralCSS(doMarginPaddingReset = true) {\n    // language=css\n    const marginPaddingResetCss = doMarginPaddingReset ? css`\n        blockquote, body, dd, dl, dt, fieldset, figure, h1, h2, h3, h4, h5, h6, hr, html, iframe, legend, li, ol, p, pre, textarea, ul {\n            margin: 0;\n            padding: 0;\n        }\n    ` : css``;\n\n    // language=css\n    return css`\n        h2 {\n            font-weight: 300;\n        }\n\n        code {\n            background-color: var(--dbp-light);\n            color: var(--dbp-danger-bg-color);\n            font-size: 1em;\n            line-height: 1.5em;\n            font-weight: normal;\n            padding: 0.25em 0.5em 0.25em;\n        }\n\n        .field:not(:last-child) {\n            margin-bottom: 0.75rem;\n        }\n\n        .field.has-addons {\n            display: flex;\n            justify-content: flex-start;\n        }\n\n        .input, .textarea, .select select {\n            border: solid 1px #aaa;\n            border-radius: var(--dbp-border-radius);\n            padding-bottom: calc(.375em - 1px);\n            padding-left: calc(.625em - 1px);\n            padding-right: calc(.625em - 1px);\n            padding-top: calc(.375em - 1px);\n        }\n\n        .input::placeholder, .textarea::placeholder, .select select::placeholder {\n            color: var(--dbp-placeholder-color);\n        }\n\n        input, ::placeholder, textarea, select, .select select {\n            font-size: inherit;\n            font-family: inherit;\n        }\n\n        .control {\n            box-sizing: border-box;\n            clear: both;\n            font-size: 1rem;\n            position: relative;\n            text-align: left;\n        }\n\n        .label {\n            margin-bottom: .5em;\n            display: block;\n            font-weight: 600;\n        }\n\n        .hidden { display: none; }\n\n        a {\n            color: var(--dbp-override-muted-text);\n            cursor: pointer;\n            text-decoration: none;\n        }\n\n        a.is-download {\n            border-bottom: 1px solid rgba(0,0,0,0.4);\n            transition: background-color 0.15s, color 0.15s;\n        }\n\n        a.is-download:hover {\n            color: #fff;\n            background-color: #000;\n        }\n\n        /* Inline SVG don't work in our web-components */\n        /*\n        a.is-download:after, a.is-download:hover:after {\n            content: \"\\\\00a0\\\\00a0\\\\00a0\\\\00a0\";\n            background-image: url('data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3Ardf%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2F02%2F22-rdf-syntax-ns%23%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20height%3D%228.3021mm%22%20width%3D%228.2977mm%22%20version%3D%221.1%22%20xmlns%3Acc%3D%22http%3A%2F%2Fcreativecommons.org%2Fns%23%22%20xmlns%3Adc%3D%22http%3A%2F%2Fpurl.org%2Fdc%2Felements%2F1.1%2F%22%20viewBox%3D%220%200%2029.401607%2029.41681%22%3E%3Cg%20style%3D%22stroke-width%3A2.1%22%20transform%3D%22translate(-271.68%20-367.92)%22%3E%3Cpath%20style%3D%22stroke-linejoin%3Around%3Bstroke%3A%23000%3Bstroke-linecap%3Around%3Bstroke-width%3A2.1%3Bfill%3Anone%22%20d%3D%22m300.13%20390.41v2.3918c0%201.9813-1.6064%203.5877-3.5877%203.5877h-20.326c-1.9813%200-3.5877-1.6064-3.5877-3.5877v-2.3918%22%2F%3E%3Cpath%20style%3D%22stroke-linejoin%3Around%3Bstroke%3A%23000%3Bstroke-linecap%3Around%3Bstroke-width%3A2.1%3Bfill%3Anone%22%20d%3D%22m286.38%20390.27v-21.384%22%2F%3E%3Cpath%20style%3D%22stroke-linejoin%3Around%3Bstroke%3A%23000%3Bstroke-linecap%3Around%3Bstroke-width%3A2.1%3Bfill%3Anone%22%20d%3D%22m295.13%20381.52-8.7501%208.7462-8.7501-8.7462%22%2F%3E%3C%2Fg%3E%3C%2Fsvg%3E');\n            background-size: contain;\n            background-repeat: no-repeat;\n            background-position: center center;\n            margin: 0 0.25% 0 1.5%;\n            font-size: 94%;\n        }\n        */\n\n        .title {\n            color: #363636;\n            font-size: 2rem;\n            font-weight: 600;\n            line-height: 1.125;\n        }\n\n        ${marginPaddingResetCss}\n\n        .button[disabled], .file-cta[disabled], .file-name[disabled], .input[disabled], .pagination-ellipsis[disabled],\n        .pagination-link[disabled], .pagination-next[disabled], .pagination-previous[disabled], .select fieldset[disabled] select,\n        .select select[disabled], .textarea[disabled], fieldset[disabled] .button, fieldset[disabled] .file-cta,\n        fieldset[disabled] .file-name, fieldset[disabled] .input, fieldset[disabled] .pagination-ellipsis,\n        fieldset[disabled] .pagination-link, fieldset[disabled] .pagination-next, fieldset[disabled] .pagination-previous,\n        fieldset[disabled] .select select, fieldset[disabled] .textarea {\n            cursor: not-allowed;\n        }\n\n        .input, .select select, .textarea {\n            background-color: #fff;\n            border-color: var(--dbp-muted);\n            border-radius: var(--dbp-border-radius);\n            color: var(--dbp-muted);\n        }\n\n        *, ::after, ::before {\n            box-sizing: inherit;\n        }\n\n        select:not(.select) {\n            -moz-appearance: none;\n            -webkit-appearance: none;\n            background: calc(100% - 0.2rem) center no-repeat url(\"${unsafeCSS(getIconSVGURL('chevron-down'))}\");\n            background-size: 25%;\n            border-color: black;\n            border-width: 1px;\n            border-radius: var(--dbp-border-radius);\n            color: black;\n            padding: 0.14rem 1.0rem 0.14rem 0.14rem;\n            border-style: solid;\n        }\n    `;\n}\n\nexport function getFormAddonsCSS() {\n    // language=css\n    return css`\n        .buttons.has-addons .button:not(:first-child) {\n            border-bottom-left-radius: 0;\n            border-top-left-radius: 0;\n        }\n\n        .buttons.has-addons .button:not(:last-child) {\n            border-bottom-right-radius: 0;\n            border-top-right-radius: 0;\n            margin-right: -1px;\n        }\n\n        .buttons.has-addons .button:last-child {\n            margin-right: 0;\n        }\n\n        .buttons.has-addons .button:hover, .buttons.has-addons .button.is-hovered {\n            z-index: 2;\n        }\n\n        .buttons.has-addons .button:focus, .buttons.has-addons .button.is-focused, .buttons.has-addons .button:active, .buttons.has-addons .button.is-active, .buttons.has-addons .button.is-selected {\n            z-index: 3;\n        }\n\n        .buttons.has-addons .button:focus:hover, .buttons.has-addons .button.is-focused:hover, .buttons.has-addons .button:active:hover, .buttons.has-addons .button.is-active:hover, .buttons.has-addons .button.is-selected:hover {\n            z-index: 4;\n        }\n\n        .buttons.has-addons .button.is-expanded {\n            flex-grow: 1;\n            flex-shrink: 1;\n        }\n\n        .buttons.is-centered {\n            justify-content: center;\n        }\n\n        .buttons.is-centered:not(.has-addons) .button:not(.is-fullwidth) {\n            margin-left: 0.25rem;\n            margin-right: 0.25rem;\n        }\n\n        .buttons.is-right {\n            justify-content: flex-end;\n        }\n\n        .buttons.is-right:not(.has-addons) .button:not(.is-fullwidth) {\n            margin-left: 0.25rem;\n            margin-right: 0.25rem;\n        }\n\n        .tags.has-addons .tag {\n            margin-right: 0;\n        }\n\n        .tags.has-addons .tag:not(:first-child) {\n            margin-left: 0;\n            border-bottom-left-radius: 0;\n            border-top-left-radius: 0;\n        }\n\n        .tags.has-addons .tag:not(:last-child) {\n            border-bottom-right-radius: 0;\n            border-top-right-radius: 0;\n        }\n\n        .field.has-addons {\n            display: flex;\n            justify-content: flex-start;\n        }\n\n        .field.has-addons .control:not(:last-child) {\n            margin-right: -1px;\n        }\n\n        .field.has-addons .control:not(:first-child):not(:last-child) .button,\n        .field.has-addons .control:not(:first-child):not(:last-child) .input,\n        .field.has-addons .control:not(:first-child):not(:last-child) .select select {\n            border-radius: 0;\n        }\n\n        .field.has-addons .control:first-child:not(:only-child) .button,\n        .field.has-addons .control:first-child:not(:only-child) .input,\n        .field.has-addons .control:first-child:not(:only-child) .select select {\n            border-bottom-right-radius: 0;\n            border-top-right-radius: 0;\n        }\n\n        .field.has-addons .control:last-child:not(:only-child) .button,\n        .field.has-addons .control:last-child:not(:only-child) .input,\n        .field.has-addons .control:last-child:not(:only-child) .select select {\n            border-bottom-left-radius: 0;\n            border-top-left-radius: 0;\n        }\n\n        .field.has-addons .control .button:not([disabled]):hover, .field.has-addons .control .button:not([disabled]).is-hovered,\n        .field.has-addons .control .input:not([disabled]):hover,\n        .field.has-addons .control .input:not([disabled]).is-hovered,\n        .field.has-addons .control .select select:not([disabled]):hover,\n        .field.has-addons .control .select select:not([disabled]).is-hovered {\n            z-index: 2;\n        }\n\n        .field.has-addons .control .button:not([disabled]):focus, .field.has-addons .control .button:not([disabled]).is-focused, .field.has-addons .control .button:not([disabled]):active, .field.has-addons .control .button:not([disabled]).is-active,\n        .field.has-addons .control .input:not([disabled]):focus,\n        .field.has-addons .control .input:not([disabled]).is-focused,\n        .field.has-addons .control .input:not([disabled]):active,\n        .field.has-addons .control .input:not([disabled]).is-active,\n        .field.has-addons .control .select select:not([disabled]):focus,\n        .field.has-addons .control .select select:not([disabled]).is-focused,\n        .field.has-addons .control .select select:not([disabled]):active,\n        .field.has-addons .control .select select:not([disabled]).is-active {\n            z-index: 3;\n        }\n\n        .field.has-addons .control .button:not([disabled]):focus:hover, .field.has-addons .control .button:not([disabled]).is-focused:hover, .field.has-addons .control .button:not([disabled]):active:hover, .field.has-addons .control .button:not([disabled]).is-active:hover,\n        .field.has-addons .control .input:not([disabled]):focus:hover,\n        .field.has-addons .control .input:not([disabled]).is-focused:hover,\n        .field.has-addons .control .input:not([disabled]):active:hover,\n        .field.has-addons .control .input:not([disabled]).is-active:hover,\n        .field.has-addons .control .select select:not([disabled]):focus:hover,\n        .field.has-addons .control .select select:not([disabled]).is-focused:hover,\n        .field.has-addons .control .select select:not([disabled]):active:hover,\n        .field.has-addons .control .select select:not([disabled]).is-active:hover {\n            z-index: 4;\n        }\n\n        .field.has-addons .control.is-expanded {\n            flex-grow: 1;\n            flex-shrink: 1;\n        }\n\n        .field.has-addons.has-addons-centered {\n            justify-content: center;\n        }\n\n        .field.has-addons.has-addons-right {\n            justify-content: flex-end;\n        }\n\n        .field.has-addons.has-addons-fullwidth .control {\n            flex-grow: 1;\n            flex-shrink: 0;\n        }\n    `;\n}\n\nexport function getNotificationCSS() {\n    // language=css\n    return css`\n        .notification {\n            background-color: var(--dbp-light);\n            padding: 1.25rem 2.5rem 1.25rem 1.5rem;\n            position: relative;\n            border-radius: var(--dbp-border-radius);\n        }\n\n        .notification a:not(.button):not(.dropdown-item) {\n            color: currentColor;\n            text-decoration: underline;\n        }\n\n        .notification strong {\n            color: currentColor;\n        }\n\n        .notification code,\n        .notification pre {\n            color: var(--dbp-light);\n            background: var(--dbp-muted-text);\n        }\n\n        .notification pre code {\n            background: transparent;\n        }\n\n        .notification dbp-icon {\n            font-size: 1.4em;\n            margin-right: 0.4em;\n        }\n\n        .notification > .delete {\n            position: absolute;\n            right: 0.5rem;\n            top: 0.5rem;\n        }\n\n        .notification .title,\n        .notification .subtitle,\n        .notification .content {\n            color: currentColor;\n        }\n\n        .notification.is-primary {\n            background-color: var(--dbp-primary-bg-color);\n            color: var(--dbp-primary-text-color);\n        }\n\n        .notification.is-info {\n            background-color: var(--dbp-info-bg-color);\n            color: var(--dbp-info-text-color);\n        }\n\n        .notification.is-success {\n            background-color: var(--dbp-success-bg-color);\n            color: var(--dbp-success-text-color);\n        }\n\n        .notification.is-warning {\n            background-color: var(--dbp-warning-bg-color);\n            color: var(--dbp-warning-text-color);\n        }\n\n        .notification.is-danger {\n            background-color: var(--dbp-danger-bg-color);\n            color: var(--dbp-danger-text-color);\n        }\n    `;\n}\n\nexport function getButtonCSS() {\n    // language=css\n    return css`\n        button.button, .button, button.dt-button {\n            border-style: solid;\n            border-color: black;\n            border-width: 1px;\n            border-radius: var(--dbp-border-radius);\n            color: black;\n            cursor: pointer;\n            justify-content: center;\n            padding-bottom: calc(0.375em - 1px);\n            padding-left: 0.75em;\n            padding-right: 0.75em;\n            padding-top: calc(0.375em - 1px);\n            text-align: center;\n            white-space: nowrap;\n            font-size: inherit;\n            font-family: inherit;\n            transition: background-color 0.15s ease 0s, color 0.15s ease 0s;\n            background: none;\n        }\n\n        button.button:hover, .button:hover, button.dt-button:hover, button.dt-button:hover:not(.disabled) {\n            color: white;\n            background: none;\n            background-color: black;\n        }\n\n        button.button.is-small, .button.is-small {\n            border-radius: calc(var(--dbp-border-radius) / 2);\n            font-size: .75rem;\n        }\n\n        button.button.is-primary, .button.is-primary {\n            background-color: var(--dbp-primary-bg-color);\n            border: var(--dbp-primary-button-border);\n            color: var(--dbp-primary-text-color);\n        }\n\n        button.button.is-info, .button.is-info {\n            background-color: var(--dbp-info-bg-color);\n            color: var(--dbp-info-text-color);\n        }\n\n        button.button.is-success, .button.is-success {\n            background-color: var(--dbp-success-bg-color);\n            color: var(--dbp-success-text-color);\n        }\n\n        button.button.is-warning, .button.is-warning {\n            background-color: var(--dbp-warning-bg-color);\n            color: var(--dbp-warning-text-color);\n        }\n\n        .button.button.is-danger, .button.is-danger {\n            background-color: var(--dbp-danger-bg-color);\n            color: var(--dbp-danger-text-color);\n        }\n\n        button.button[disabled], .button[disabled], fieldset[disabled] .button {\n            opacity: .5;\n            cursor: not-allowed;\n        }\n    `;\n}\n\nexport function getRadioAndCheckboxCss() {\n    // language=css\n    return css`            \n            \n        /* \n        Radiobutton:\n            <label class=\"button-container\">\n                Labeltext\n                <input type=\"radio\" name=\"myradiobutton\">\n                <span class=\"radiobutton\"></span>\n            </label>\n            \n        Checkbox:\n            <label class=\"button-container\">\n                Labeltext\n                <input type=\"checkbox\" name=\"mycheckbox\"> \n                <span class=\"checkmark\"></span>\n            </label>\n         */\n            \n        .button-container {\n            display: block;\n            position: relative;\n            padding-left: 35px;\n            cursor: pointer;\n            -webkit-user-select: none;\n            -moz-user-select: none;\n            -ms-user-select: none;\n            user-select: none;\n        }\n        \n        .button-container input[type=\"radio\"], .button-container input[type=\"checkbox\"] {\n            position: absolute;\n            opacity: 0;\n            cursor: pointer;\n            height: 0;\n            width: 0;\n            left: 0px;\n        }\n        \n        .checkmark {\n            position: absolute;\n            top: 0;\n            left: 0;\n            height: 21px;\n            width: 21px;\n            background-color: white;\n            border: solid;\n            border-radius: var(--dbp-border-radius);\n            border-width: var(--dbp-border-width);\n            border-color: var(--dbp-border-color);\n        }\n        \n        .radiobutton {\n            position: absolute;\n            top: 0;\n            left: 0;\n            height: 20px;\n            width: 20px;\n            background-color: white;\n            border: solid;\n            border-radius: 100%;\n            border-width: var(--dbp-border-width);\n            border-color: var(--dbp-border-color);\n            box-sizing: content-box;\n        }\n\n        .button-container input[type=\"radio\"]:checked ~ .radiobutton:after {\n            border-color: white;\n        }\n        \n        .button-container input[type=\"radio\"]:disabled ~ .radiobutton {\n            border-color: #aaa;\n            background-color: #eee;\n        }\n\n        .button-container input[type=\"radio\"]:checked:disabled ~ .radiobutton:after {\n            border-color: #aaa;\n            background-color: #aaa;\n        }\n        \n        .radiobutton:after {\n            content: \"\";\n            position: absolute;\n            display: none;\n        }\n        \n        .button-container input[type=\"radio\"]:checked ~ .radiobutton:after {\n            display: block;\n        }\n        \n        .button-container .radiobutton:after {\n            left: 0px;\n            top: 0px;\n            width: 100%;\n            height: 100%;\n            background-color: var(--dbp-border-color);\n            border: none;\n            border-radius: 100%;\n            border: 2px solid white;\n            box-sizing: border-box;\n        }\n        \n        .button-container input[type=\"checkbox\"]:checked ~ .checkmark:after {\n            border-color: var(--dbp-border-color);\n        }\n        \n        .button-container input[type=\"checkbox\"]:disabled ~ .checkmark {\n            border-color: #aaa;\n            background-color: #eee;\n        }\n\n        .button-container input[type=\"checkbox\"]:checked:disabled ~ .checkmark:after {\n            border-color: #aaa;\n        }\n\n        .checkmark:after {\n            content: \"\";\n            position: absolute;\n            display: none;\n        }\n        \n        .button-container input[type=\"checkbox\"]:checked ~ .checkmark:after {\n            display: block;\n        }\n        \n        .button-container .checkmark:after {\n            left: 7px;\n            top: 4px;\n            width: 6px;\n            height: 10px;\n            border: solid var(--dbp-border-color);\n            border-width: 0 2px 2px 0;\n            -webkit-transform: rotate(45deg);\n            -ms-transform: rotate(45deg);\n            transform: rotate(45deg);\n        }\n        \n    `;\n}\n\nexport function getTagCSS() {\n    // language=css\n    return css`\n        .tags {\n            align-items: center;\n            display: flex;\n            flex-wrap: nowrap;\n            justify-content: flex-start;\n        }\n\n        .tags .tag {\n            margin-bottom: 0.5rem;\n        }\n\n        .tags .tag:not(:last-child) {\n            margin-right: 0.5rem;\n        }\n\n        .tags:last-child {\n            margin-bottom: -0.5rem;\n        }\n\n        .tags:not(:last-child) {\n            margin-bottom: 1rem;\n        }\n\n        .tags.are-medium .tag:not(.is-normal):not(.is-large) {\n            font-size: 1rem;\n        }\n\n        .tags.are-large .tag:not(.is-normal):not(.is-medium) {\n            font-size: 1.25rem;\n        }\n\n        .tags.is-centered {\n            justify-content: center;\n        }\n\n        .tags.is-centered .tag {\n            margin-right: 0.25rem;\n            margin-left: 0.25rem;\n        }\n\n        .tags.is-right {\n            justify-content: flex-end;\n        }\n\n        .tags.is-right .tag:not(:first-child) {\n            margin-left: 0.5rem;\n        }\n\n        .tags.is-right .tag:not(:last-child) {\n            margin-right: 0;\n        }\n\n        .tags.has-addons .tag {\n            margin-right: 0;\n        }\n\n        .tags.has-addons .tag:not(:first-child) {\n            margin-left: 0;\n            border-bottom-left-radius: 0;\n            border-top-left-radius: 0;\n        }\n\n        .tags.has-addons .tag:not(:last-child) {\n            border-bottom-right-radius: 0;\n            border-top-right-radius: 0;\n        }\n\n        .tag:not(body) {\n            align-items: center;\n            background-color: whitesmoke;\n            border-radius: var(--dbp-border-radius);\n            color: #4a4a4a;\n            display: inline-flex;\n            font-size: 0.75rem;\n            height: 2em;\n            justify-content: center;\n            line-height: 1.5;\n            padding-left: 0.75em;\n            padding-right: 0.75em;\n            white-space: nowrap;\n        }\n\n        .tag:not(body) .delete {\n            margin-left: 0.25rem;\n            margin-right: -0.375rem;\n        }\n\n        .tag:not(body).is-dark {\n            background-color: var(--dbp-dark);\n            color: whitesmoke;\n        }\n\n        .tag:not(body).is-light {\n            background-color: var(--dbp-light);\n            color: #363636;\n        }\n\n        .tag:not(body).is-normal {\n            font-size: 0.75rem;\n        }\n\n        .tag:not(body).is-medium {\n            font-size: 1rem;\n        }\n\n        .tag:not(body).is-large {\n            font-size: 1.25rem;\n        }\n\n        .tag:not(body) .icon:first-child:not(:last-child) {\n            margin-left: -0.375em;\n            margin-right: 0.1875em;\n        }\n\n        .tag:not(body) .icon:last-child:not(:first-child) {\n            margin-left: 0.1875em;\n            margin-right: -0.375em;\n        }\n\n        .tag:not(body) .icon:first-child:last-child {\n            margin-left: -0.375em;\n            margin-right: -0.375em;\n        }\n\n        .tag:not(body).is-delete {\n            margin-left: 1px;\n            padding: 0;\n            position: relative;\n            width: 2em;\n        }\n\n        .tag:not(body).is-delete::before, .tag:not(body).is-delete::after {\n            background-color: currentColor;\n            content: \"\";\n            display: block;\n            left: 50%;\n            position: absolute;\n            top: 50%;\n            -webkit-transform: translateX(-50%) translateY(-50%) rotate(45deg);\n            transform: translateX(-50%) translateY(-50%) rotate(45deg);\n            -webkit-transform-origin: center center;\n            transform-origin: center center;\n        }\n\n        .tag:not(body).is-delete::before {\n            height: 1px;\n            width: 50%;\n        }\n\n        .tag:not(body).is-delete::after {\n            height: 50%;\n            width: 1px;\n        }\n\n        .tag:not(body).is-delete:hover, .tag:not(body).is-delete:focus {\n            background-color: #e8e8e8;\n        }\n\n        .tag:not(body).is-delete:active {\n            background-color: #dbdbdb;\n        }\n\n        .tag:not(body).is-rounded {\n            border-radius: 290486px;\n        }\n\n        a.tag:hover {\n            text-decoration: underline;\n        }\n    `;\n}\n\nexport function getDocumentationCSS() {\n    // language=css\n    return css`\n        .documentation h1, .documentation h2, .documentation h3 {\n            margin: 1em 0 0.8em 0;\n        }\n\n        .documentation p {\n            margin: 1em 0;\n        }\n\n        .documentation a {\n            border-bottom: 1px solid var(--dbp-muted-text);\n            transition: background-color 0.15s, color 0.15s;\n        }\n\n        .documentation a:hover {\n            color: #fff;\n            background-color: #000;\n        }\n\n        .documentation ul, .documentation ol, .documentation li {\n            margin: inherit;\n            padding: inherit;\n        }\n\n        .documentation li > ul {\n            margin-left: 0.5em;\n        }\n    `;\n}\n\nexport function getSelect2CSS() {\n    // language=css\n    return css`\n        .select2-dropdown {\n            border-radius: var(--dbp-border-radius);\n        }\n\n        .select2-container--default .select2-selection--single {\n            border-radius: var(--dbp-border-radius);\n        }\n\n        .select2-container--default .select2-selection--single .select2-selection__rendered {\n            color: inherit;\n        }\n\n        .select2-container--default .select2-selection--single .select2-selection__clear {\n            font-size: 1.5em;\n            font-weight: 300;\n            /* color: red; */\n        }\n\n        .select2-container--default .select2-selection--single .select2-selection__placeholder {\n            color: var(--dbp-placeholder-color);\n        }\n\n        /* Work around single selections not wrapping and breaking responsivness */\n        .select2-container--default .select2-selection--single {\n            height: 100% !important;\n        }\n        .select2-container--default .select2-selection__rendered{\n            word-wrap: break-word !important;\n            text-overflow: inherit !important;\n            white-space: normal !important;\n        }\n    `;\n}\n\nexport function getModalDialogCSS() {\n    // language=css\n    return css`\n        /**************************\\\\\n          Modal Styles\n        \\\\**************************/\n\n        .modal-overlay {\n            position: fixed;\n            top: 0;\n            left: 0;\n            right: 0;\n            bottom: 0;\n            background: rgba(0, 0, 0, 0.6);\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            z-index: 10000;\n        }\n\n        .modal-container {\n            background-color: #fff;\n            max-width: 600px;\n            max-height: 100vh;\n            min-width: 60%;\n            min-height: 50%;\n            overflow-y: auto;\n            box-sizing: border-box;\n            display: grid;\n            height: 70%;\n            width: 70%;\n            position: relative;\n        }\n        \n        .modal-close {\n            background: transparent;\n            border: none;\n            font-size: 1.5rem;\n            color: var(--dbp-override-danger-bg-color);\n            cursor: pointer;\n            padding: 0px;\n        }\n        \n        .modal-close .close-icon svg, .close-icon{\n            pointer-events: none;\n        }\n\n        button.modal-close:focus {\n            outline: none;\n        }\n\n\n        /**************************\\\\\n          Modal Animation Style\n        \\\\**************************/\n        @keyframes mmfadeIn {\n            from {\n                opacity: 0;\n            }\n            to {\n                opacity: 1;\n            }\n        }\n\n        @keyframes mmfadeOut {\n            from {\n                opacity: 1;\n            }\n            to {\n                opacity: 0;\n            }\n        }\n\n        @keyframes mmslideIn {\n            from {\n                transform: translateY(15%);\n            }\n            to {\n                transform: translateY(0);\n            }\n        }\n\n        @keyframes mmslideOut {\n            from {\n                transform: translateY(0);\n            }\n            to {\n                transform: translateY(-10%);\n            }\n        }\n\n        .micromodal-slide {\n            display: none;\n        }\n\n        .micromodal-slide.is-open {\n            display: block;\n        }\n\n        .micromodal-slide[aria-hidden=\"false\"] .modal-overlay {\n            animation: mmfadeIn .3s cubic-bezier(0.0, 0.0, 0.2, 1);\n        }\n\n        .micromodal-slide[aria-hidden=\"false\"] .modal-container {\n            animation: mmslideIn .3s cubic-bezier(0, 0, .2, 1);\n        }\n\n        .micromodal-slide[aria-hidden=\"true\"] .modal-overlay {\n            animation: mmfadeOut .3s cubic-bezier(0.0, 0.0, 0.2, 1);\n        }\n\n        .micromodal-slide[aria-hidden=\"true\"] .modal-container {\n            animation: mmslideOut .3s cubic-bezier(0, 0, .2, 1);\n        }\n\n        .micromodal-slide .modal-container,\n        .micromodal-slide .modal-overlay {\n            will-change: transform;\n        }\n        \n        @media only screen\n        and (orientation: landscape)\n        and (max-device-width: 896px) {\n             .modal-container {\n                 width: 100%;\n                 height: 100%;\n                 max-width: 100%;\n             }\n         }\n        \n        @media only screen\n        and (orientation: portrait)\n        and (max-device-width: 800px) {\n            .micromodal-slide .modal-container{\n                height: 100%;\n                width: 100%;\n            }\n        }\n\n        \n    `;\n}\n\nexport function getTextUtilities() {\n    // language=css\n    return css`\n        .text-left {\n            text-align: left;\n        }\n\n        .text-center {\n            text-align: center;\n        }\n\n        .text-right {\n            text-align: right;\n        }\n\n        .text-lowercase {\n            text-transform: lowercase;\n        }\n\n        .text-uppercase {\n            text-transform: uppercase;\n        }\n\n        .text-capitalize {\n            text-transform: capitalize;\n        }\n\n      \n    `;\n}\n\n\n","import {html, LitElement, css} from 'lit-element';\nimport {ScopedElementsMixin} from '@open-wc/scoped-elements';\nimport {MiniSpinner} from './mini-spinner.js';\nimport * as commonStyles from '../styles.js';\n\n/**\n * dbp-button implements a button with Bulma styles and automatic spinner and\n * disabling if button is clicked\n *\n * Use the attribute \"no-spinner-on-click\" to disable the spinner, then you can\n * start it with start() and stop it with stop()\n *\n * Type can be is-primary/is-info/is-success/is-warning/is-danger\n */\nexport class Button extends ScopedElementsMixin(LitElement) {\n    constructor() {\n        super();\n        this.value = \"\";\n        this.type = \"\";\n        this.spinner = false;\n        this.noSpinnerOnClick = false;\n        this.disabled = false;\n    }\n\n    static get scopedElements() {\n        return {\n            'dbp-mini-spinner': MiniSpinner,\n        };\n    }\n\n    connectedCallback() {\n        super.connectedCallback();\n    }\n\n    static get properties() {\n        return {\n            value: { type: String },\n            type: { type: String },\n            spinner: { type: Boolean },\n            noSpinnerOnClick: { type: Boolean, attribute: 'no-spinner-on-click' },\n            disabled: { type: Boolean, reflect: true },\n        };\n    }\n\n    clickHandler() {\n        if (!this.noSpinnerOnClick) {\n            this.start();\n        }\n    }\n\n    start() {\n        this.spinner = true;\n        this.disabled = true;\n    }\n\n    stop() {\n        this.spinner = false;\n        this.disabled = false;\n    }\n\n    isDisabled() {\n        return this.disabled;\n    }\n\n    static get styles() {\n        // language=css\n        return css`\n            ${commonStyles.getThemeCSS()}\n            ${commonStyles.getButtonCSS()}\n\n            .spinner { margin-left: 0.5em; }\n        `;\n    }\n\n    render() {\n        return html`\n            <button @click=\"${this.clickHandler}\" class=\"button ${this.type}\" ?disabled=\"${this.disabled}\">\n                ${this.value} <dbp-mini-spinner class=\"spinner\" style=\"display: ${this.spinner ? \"inline\" : \"none\"}\"></dbp-mini-spinner>\n            </button>\n        `;\n    }\n}\n\nexport class LoadingButton extends ScopedElementsMixin(LitElement) {\n    constructor() {\n        super();\n        this.value = \"\";\n        this.type = \"\";\n        this.loading = false;\n        this.disabled = false;\n    }\n\n    static get scopedElements() {\n        return {\n            'dbp-mini-spinner': MiniSpinner,\n        };\n    }\n\n    static get properties() {\n        return {\n            // value is deprecated, use the main slot instead\n            value: { type: String },\n            type: { type: String },\n            loading: { type: Boolean },\n            disabled: { type: Boolean, reflect: true },\n        };\n    }\n\n    start() {\n        this.loading = true;\n        this.disabled = true;\n    }\n\n    stop() {\n        this.loading = false;\n        this.disabled = false;\n    }\n\n    static get styles() {\n        // language=css\n        return css`\n            ${commonStyles.getThemeCSS()}\n            ${commonStyles.getButtonCSS()}\n\n            .spinner {\n                padding-left: 0.5em;\n                min-width: 16px;\n            }\n\n            .loading-container {\n                display: flex;\n                align-items: baseline;\n            }\n\n            .label {\n                white-space: nowrap;\n                overflow: hidden;\n                text-overflow: ellipsis;\n            }\n\n            :host {\n                display: inline-block;\n            }\n\n            .is-not-loading .label {\n                padding-left: 12px;\n                padding-right: 12px;\n            }\n\n            .button {\n                width: 100%;\n            }\n        `;\n    }\n\n    render() {\n        return html`\n            <button class=\"button ${this.type} loading-container  ${!this.loading ? \"is-not-loading\" : \"\"}\" ?disabled=\"${this.disabled}\">\n               <div class=\"label\">${this.value}</div> <dbp-mini-spinner class=\"spinner\" style=\"display: ${this.loading ? \"inline\" : \"none\"}\"></dbp-mini-spinner>\n            </button>\n        `;\n    }\n}\n","import {LitElement} from \"lit-element\";\n\nexport default class DBPLitElement extends LitElement {\n    _(selector) {\n        return this.shadowRoot === null ? this.querySelector(selector) : this.shadowRoot.querySelector(selector);\n    }\n}\n"],"names":["isCEPolyfill","window","customElements","undefined","polyfillWrapFlushCallback","removeNodes","container","start","end","n","nextSibling","removeChild","marker","String","Math","random","slice","nodeMarker","markerRegex","RegExp","Template","constructor","result","element","parts","nodesToRemove","stack","walker","document","createTreeWalker","content","lastPartIndex","index","partIndex","strings","values","length","node","nextNode","nodeType","hasAttributes","attributes","count","i","endsWith","name","stringForPart","lastAttributeNameRegex","exec","attributeLookupName","toLowerCase","attributeValue","getAttribute","removeAttribute","statics","split","push","type","tagName","currentNode","data","indexOf","parent","parentNode","lastIndex","insert","s","createMarker","match","createTextNode","insertBefore","previousSibling","pop","str","suffix","isTemplatePartActive","part","createComment","removeNodesFromTemplate","template","nextActiveIndexInTemplateParts","nodeIndex","removeCount","nodesToRemoveInTemplate","currentRemovingNode","has","forEach","countNodes","startIndex","directives","WeakMap","directive","f","args","d","set","isDirective","o","noChange","nothing","TemplateInstance","processor","options","__parts","update","this","setValue","commit","_clone","fragment","cloneNode","importNode","nodeName","handleTextExpression","insertAfterNode","handleAttributeExpressions","adoptNode","upgrade","policy","trustedTypes","createPolicy","createHTML","commentMarker","TemplateResult","getHTML","l","html","isCommentBinding","commentOpen","lastIndexOf","attributeMatch","substr","getTemplateElement","createElement","value","innerHTML","isPrimitive","isIterable","Array","isArray","Symbol","iterator","AttributeCommitter","dirty","_createPart","AttributePart","_getValue","v","text","t","setAttribute","committer","NodePart","__pendingValue","appendInto","startNode","appendChild","endNode","ref","appendIntoPart","__insert","insertAfterPart","__commitText","__commitTemplateResult","Node","__commitNode","__commitIterable","clear","valueAsString","templateFactory","instance","itemParts","itemPart","item","BooleanAttributePart","Error","PropertyCommitter","single","PropertyPart","super","eventOptionsSupported","addEventListener","removeEventListener","_e","EventPart","eventName","eventContext","__boundHandleEvent","e","handleEvent","newListener","oldListener","shouldRemoveListener","capture","once","passive","shouldAddListener","__options","getOptions","event","call","templateCache","templateCaches","get","stringsArray","keyString","Map","key","join","defaultTemplateProcessor","prefix","getTemplateCacheKey","scopeName","compatibleShadyCSSVersion","ShadyCSS","prepareTemplateDom","console","warn","shadyTemplateFactory","cacheKey","TEMPLATE_TYPES","shadyRenderSet","Set","prepareTemplateStyles","renderedDOM","add","templateElement","styles","querySelectorAll","condensedStyle","style","textContent","templates","from","removeStylesFromLitTemplates","refNode","insertCount","walkerIndex","insertNodeIntoTemplate","firstChild","querySelector","nativeShadow","removes","JSCompiler_renameProperty","prop","_obj","defaultConverter","toAttribute","Boolean","Object","JSON","stringify","fromAttribute","Number","parse","notEqual","old","defaultPropertyDeclaration","attribute","converter","reflect","hasChanged","UpdatingElement","HTMLElement","initialize","finalize","_classProperties","p","attr","_attributeNameForProperty","_attributeToPropertyMap","hasOwnProperty","superProperties","getPrototypeOf","k","_ensureClassProperties","noAccessor","prototype","descriptor","getPropertyDescriptor","defineProperty","oldValue","requestUpdateInternal","configurable","enumerable","superCtor","props","properties","propKeys","getOwnPropertyNames","getOwnPropertySymbols","createProperty","_updateState","_updatePromise","Promise","res","_enableUpdatingResolver","_changedProperties","_saveInstanceProperties","_v","_instanceProperties","_applyInstanceProperties","connectedCallback","enableUpdating","disconnectedCallback","attributeChangedCallback","_attributeToProperty","_propertyToAttribute","ctor","attrValue","_propertyValueToAttribute","propName","getPropertyOptions","_propertyValueFromAttribute","shouldRequestUpdate","_valueHasChanged","_reflectingProperties","_hasRequestedUpdate","_enqueueUpdate","requestUpdate","updateComplete","performUpdate","shouldUpdate","changedProperties","_markUpdated","firstUpdated","updated","_getUpdateComplete","size","supportsAdoptingStyleSheets","ShadowRoot","Document","CSSStyleSheet","constructionToken","CSSResult","cssText","safeToken","_styleSheet","replaceSync","toString","unsafeCSS","css","reduce","acc","idx","textFromCSSResult","renderNotImplemented","LitElement","userStyles","getStyles","addStyles","reduceRight","unshift","_styles","map","cssRules","rule","_getUniqueStyles","renderRoot","createRenderRoot","adoptStyles","attachShadow","mode","adoptedStyleSheets","styleSheet","_needsShimAdoptedStyleSheets","ScopingShim","prepareAdoptedCssText","localName","hasUpdated","styleElement","templateResult","render","hasRendered","needsScoping","host","firstScopeRender","renderContainer","createDocumentFragment","assign","litRender","delete","appliedClassMixins","Cache","_parent","_cache","counter","round","chars","tagRegExp","incrementTagName","registry","newTagName","isTagRegistered","createUniqueTag","tag","globalTagsCache","addToGlobalTagsCache","klass","defineElement","define","defineElementAndStoreInCache","tagsCache","isPrototypeOf","extendsHTMLElement","storeLazyElementInCache","registerElement","getFromGlobalTagsCache","re","globalCache","transformTemplate","scopedElements","transformedStrings","matches","matchAll","block","isClosingTag","tagsCaches","getTagsCache","transformArray","items","transform","scopedElementsTemplateFactory","newTemplate","ScopedElementsMixin","mixin","superclass","defineScopedElement","getScopedTagName","superClass","wasMixinPreviouslyApplied","mixedClass","parseLinkHeader","header","links","section","url","replace","trim","getAPiUrl","path","apiBaseUrl","parseBaseUrl","pathArray","defineCustomElement","Element","elements","getElementsByTagName","getAssetURL","pkg","fullPath","URL","import","meta","href","previousValues","unsafeHTML","previousValue","_state","until","state","lastRenderedIndex","previousLength","then","resolve","resolvedValue","errorIcon","getIconSVGURL","commonUtils.getAssetURL","encodeURI","iconCache","async","getSVGTextElementCached","promise","iconURL","response","fetch","ok","getSVGTextElement","Icon","svg","MiniSpinner","textHtml","getThemeCSS","getGeneralCSS","doMarginPaddingReset","marginPaddingResetCss","getNotificationCSS","getButtonCSS","getTagCSS","getSelect2CSS","Button","spinner","noSpinnerOnClick","disabled","clickHandler","stop","isDisabled","commonStyles.getThemeCSS","commonStyles.getButtonCSS","DBPLitElement","_","selector","shadowRoot"],"mappings":"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"}